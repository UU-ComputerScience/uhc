%%[(8 counting) hs module {%{EH}CountingAnalysis.ToCAModule} import(Data.Maybe,Data.Set (Set),qualified Data.Set as S,Data.Map (Map),qualified Data.Map as M, qualified Data.Map as Data.Map)
%%]

%%[(8 counting) hs import({%{EH}LamInfo},{%{EH}Base.Common},{%{EH}Base.HsName.Builtin},{%{EH}Gam.DataGam},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 counting) hs import(qualified {%{EH}CountingAnalysis} as CA)
%%]

%%[(8 counting) hs import(UHC.Util.Utils)
%%]

%%[(8 counting) hs import({%{EH}Base.Target (FFIWay)}, {%{EH}Foreign (ForeignEnt)}, {%{EH}Ty (Ty)})
%%]

Debugging
%%[(8 counting) hs import(Debug.Trace)
%%]

%%[(8 counting).WRAPPER ag import({Core/AbsSyn})
WRAPPER CodeAGItf
%%]


%%[(99 counting)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) hs export(toCAModule)
toCAModule :: Map HsName CA.Scheme -> CModule -> CA.Module
toCAModule lamMap cmod
  =  let t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) 
                            (Inh_CodeAGItf
                             { lamMp_Inh_CodeAGItf = lamMap
                             })
     in trf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting) hs

getConVar :: CA.Expr -> CA.ConVar
getConVar (CA.Expr_VarLocal v _) = CA.ConVar_VarLocal v
getConVar (CA.Expr_VarImport v _) = CA.ConVar_VarImport v
getConVar (CA.Expr_Const c) = CA.ConVar_Const c
getConVar (CA.Expr_AnnCore _ e) = getConVar e
getConVar e = panic $ "getting app bound failed from: " ++ show e

%%]

%%[(8 counting) ag

ATTR * [lamMp: {Map HsName CA.Scheme} | | copy: SELF ]

ATTR CodeAGItf [ | | trf: {CA.Module} ]
ATTR CModule [ | | trf: {CA.Module} ]
ATTR CExpr [ | | trf: {CA.Expr} ]
ATTR CPat [ | | trf: {Either (Either Int Char) (Either (HsName, HsName, [HsName]) [HsName])} ]
ATTR CBind [ | | trf: {Either CA.Binding HsName} ]
ATTR CBound [ | | trf: {CA.Expr} ]
ATTR CAlt [ | | trf: {Either (Either CA.AltCon ([HsName], CA.Expr, CPat)) CA.AltConst} ]
ATTR CBindL [ | | trf: {CA.Bindings} ]
ATTR CBoundL [ | | trf: {[CA.Expr]} ]
ATTR CAltL [ | | trf: {Either (Either CA.AltCons ([HsName], CA.Expr, CPat)) (Either CA.AltConsts ())} ]
ATTR CPatRest [ | | isEmpty: {Bool} ]
ATTR CPatFldL [ | | trf: {[HsName]} ]
ATTR CPatFld [ | | trf: {HsName} ]

SEM CModule 
  | Mod
   lhs.trf = CA.Module_Module @expr.trf (@moduleNm, @exports.copy, @imports.copy, @declMetas.copy)

SEM CExpr
  | Var
    lhs.trf = (if @loc.isImported then CA.Expr_VarImport else CA.Expr_VarLocal) (acbrefNm @ref) @ref
    loc.isImported = acbrefNm @ref `M.member` @lhs.lamMp
  | Int
    lhs.trf = CA.Expr_Const $ CA.Const_Int @int
  | Char
    lhs.trf = CA.Expr_Const $ CA.Const_Char @char
  | String 
    lhs.trf = CA.Expr_Const $ CA.Const_String @str
%%[[(97 core)
  | Integer
    lhs.trf = CA.Expr_Const $ CA.Const_Integer @integer
%%]] 
  | Let
    lhs.trf = if @loc.isStrict then 
                case @binds.trf of
                  [CA.Binding_Bind n e ex] -> CA.Expr_LetBang n e @body.trf ex
                  _ -> panic "multiple bindings in let!"
               else CA.Expr_Let @binds.trf @body.trf @categ
    loc.isStrict = case @categ of
                    CBindCateg_Strict -> True
                    _ -> False
  | Tup
    lhs.trf = if @loc.isRec then CA.Expr_Tup [] (@tag, []) else CA.Expr_Con (ctagTyNm @tag) (ctagNm @tag) [] (@tag, [])
    loc.isRec = ctagIsRec @tag
  | Lam
    lhs.trf = CA.Expr_Abs @loc.arg @body.trf @bind.copy
    loc.arg = case @bind.trf of 
                Right n -> n
                Left (CA.Binding_Bind n _ _) -> n
    -- totally ignore dflt
  | Case
    lhs.trf = case @alts.trf of
                Left (Left cs) -> CA.Expr_CaseCon @expr.trf cs @dflt.copy
                Left (Right (xs, e, p)) -> CA.Expr_CaseTup @expr.trf xs e (p, @dflt.copy)
                Right (Left cs) -> CA.Expr_CaseConst @expr.trf cs @dflt.copy

  | App
    lhs.trf = case @func.trf of
                CA.Expr_Con tn cn flds (t,bl) -> CA.Expr_Con tn cn (flds ++ [@loc.cv]) (t, bl ++ [@arg.copy])
                CA.Expr_Tup flds (t,bl) -> CA.Expr_Tup (flds ++ [@loc.cv]) (t, bl ++ [@arg.copy])
                _ -> case @loc.cv of
                  CA.ConVar_VarLocal v -> CA.Expr_AppLocal @func.trf v @arg.copy
                  CA.ConVar_VarImport v -> CA.Expr_AppImport @func.trf v @arg.copy
                  CA.ConVar_Const c -> CA.Expr_AppConst @func.trf c @arg.copy
    loc.cv = getConVar @arg.trf
  | FFI
    lhs.trf = CA.Expr_FFI @ty (@callconv, @safety, @impEnt)
  | Ann
    lhs.trf = case @ann.copy of
                CExprAnn_CAType t -> CA.Expr_Ann t @expr.trf
                _ -> CA.Expr_AnnCore @ann.copy @expr.trf

SEM CPat
  | Con
    lhs.trf = if @rest.isEmpty then
                if @loc.isRec then Right $ Right @binds.trf else Right $ Left (ctagTyNm @tag, ctagNm @tag, @binds.trf)
              else panic "CPatRest not empty"
    loc.isRec = ctagIsRec @tag
  | Var
    lhs.trf = panic "Unsupported CPat alternative Var"
  | Int
    lhs.trf = Left $ Left @int
  | Char
    lhs.trf = Left $ Right @char
%%[[(97 core)
  | BoolExpr
    lhs.trf = panic "Unsupported CPat alternative BoolExpr"
%%]]

SEM CPatRest
  | Var
    lhs.isEmpty = False
  | Empty
    lhs.isEmpty = True

SEM CPatFld
  | Fld
    lhs.trf = case @bind.trf of 
                Right n -> n
                Left b -> panic $ "No var in CPatFld: " ++ show b

SEM CBind
  | Bind
    lhs.trf = case length @bindAspects.trf of
                0 -> Right @nm
                1 -> Left $ CA.Binding_Bind @nm (head @bindAspects.trf) @loc.ex
                _ -> traceShow (@bindAspects.trf) $ panic $ "Multiple bounds for single bind: " ++ show @nm
    loc.ex = case @bindAspects.copy of
              [CBound_Bind _] -> Nothing
              [CBound_Val aks mlev lbl _] -> Just (aks, mlev, lbl)
              [CBound_Ty _ _] -> Just $ panic $ "Ty Found in toCAModule.CBind_Bind: " ++ show @bindAspects.copy
              _ -> Nothing -- panic $ "Laziness error in toCAModule.CBind_Bind: " ++ show @bindAspects.copy

SEM CBound
  | Bind Val
    lhs.trf = @expr.trf
%%[[(8 codegenanalysis)
  | RelevTy
    lhs.trf = panic "Unsupported CBound Alternative RelevTy" 
%%]]
  | Ty
    lhs.trf = CA.Expr_Error "Unsupported CBound Alternative Ty" 
%%[[90
  | FFE
    lhs.trf = panic "Unsupported CBound Alternative FFE" 
%%]]

SEM CAlt
  | Alt
    lhs.trf = case @pat.trf of
                Left (Left n) -> Right $ CA.AltConst_Int n @expr.trf @pat.copy
                Left (Right c) -> Right $ CA.AltConst_Char c @expr.trf @pat.copy
                Right (Left (d,c,xs)) -> Left $ Left $ CA.AltCon_Alt d c xs @expr.trf @pat.copy
                Right (Right xs) -> Left $ Right (xs, @expr.trf, @pat.copy)

SEM CBindL
  | Cons
    lhs.trf = @loc.bind : @tl.trf
    loc.bind = case @hd.trf of
                Left b -> b
                Right n -> panic "Empty BoundL in BindL" 
  | Nil
    lhs.trf = []

SEM CBoundL CPatFldL
  | Cons
    lhs.trf = @hd.trf : @tl.trf
  | Nil
    lhs.trf = []

SEM CAltL
  | Cons
    lhs.trf = case (@hd.trf, @tl.trf) of
                (Left (Left x), Left (Left xs)) -> Left $ Left $ x:xs
                (Left (Left x), Right (Right ())) -> Left $ Left [x]
                (Right x, Right (Left xs)) -> Right $ Left $ x:xs
                (Right x, Right (Right ())) -> Right $ Left [x]
                (Left (Right x), Right (Right ())) -> Left $ Right x
                _ -> panic "Mismatched cases"
  | Nil
    lhs.trf = Right $ Right ()

-- not supported
SEM CExpr
  | CaseAltFail
    lhs.trf = panic "Unsupported expression CaseAltFail"-- CAExpr_Var $ mkHNm "Unsupported expression CaseAltFail"
  | TupDel
    lhs.trf = panic "Unsupported expression TupDel"-- CAExpr_Var $ mkHNm "Unsupported expression TupDel"
  | TupIns
    lhs.trf = panic "Unsupported expression TupIns"-- CAExpr_Var $ mkHNm "Unsupported expression TupIns"
  | TupUpd
    lhs.trf = panic "Unsupported expression TupUpd"-- CAExpr_Var $ mkHNm "Unsupported expression TupUpd"
  | Dbg
    lhs.trf = panic "Unsupported expression Dbg"-- CAExpr_Var $ mkHNm "Unsupported expression Dbg"
  | Hole
    lhs.trf = panic "Unsupported expression Hole"-- CAExpr_Var $ mkHNm "Unsupported expression Hole"
  | HoleLet
    lhs.trf = panic "Unsupported expression HoleLet"-- CAExpr_Var $ mkHNm "Unsupported expression HoleLet"
  | CoeArg
    lhs.trf = panic "Unsupported expression CoeArg"-- CAExpr_Var $ mkHNm "Unsupported expression CoeArg"
  | ImplsApp
    lhs.trf = panic "Unsupported expression ImplsApp"-- CAExpr_Var $ mkHNm "Unsupported expression ImplsApp"
  | ImplsLam
    lhs.trf = panic "Unsupported expression ImplsLam"-- CAExpr_Var $ mkHNm "Unsupported expression ImplsLam"

%%]

