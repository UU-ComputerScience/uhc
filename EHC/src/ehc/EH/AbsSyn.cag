%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% EH Abstract syntax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wildcard extensions: Range, as first field
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99
DATA AllNT
  | *               hsrange         : Range
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.AGItf
DATA AGItf
  | AGItf           expr            : Expr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Decl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Decl
DATA Decl
  | TySig           nm              : {HsName}
                    tyExpr          : TyExpr
  | Val             patExpr         : PatExpr
                    expr            : Expr

TYPE Decls          = [Decl]

SET AllDecl         = Decl Decls
%%]

%%[5
DATA Decl
  | Data            isNewtype       : {Bool}
                    tyNm            : {HsName}
                    tyVars          : TyVars
                    constrs         : DataConstrs
%%[[92
					mbGenerInfo		: {Maybe Int}		-- max kind arity for generic behavior, currently \in {0,1}
%%]]
%%]

%%[6.Decl
DATA Decl
  | KiSig           nm              : {HsName}
                    kiExpr          : KiExpr
%%]

%%[(8 codegen)
DATA Decl
  | FFI             callconv        : {FFIWay}
                    safety          : {String}
%%[[8
                    impEnt          : {String}
%%][90
                    impEnt          : {ForeignEnt}
%%]]
                    nm              : {HsName}
                    tyExpr          : TyExpr
%%]

%%[11
DATA Decl
  | Type            tyNm            : {HsName}
                    tyExpr          : TyExpr
%%]

%%[(90 codegen)
DATA Decl
  | FFE             nm              : {HsName}
                    callconv        : {FFIWay}
                    expEnt          : {ForeignEnt}
                    expr            : Expr
                    tyExpr          : TyExpr
%%]

Representation types + instances for generic deriving

%%[92
DATA Decl
  | GenerRep        maxArity		: {Int}						-- max required unsaturated type arguments
  					tyNm            : {HsName}					-- type name
  					conNmL			: {[HsName]}		-- constructors + field names
  					recFldNmL		: {[(HsName,[HsName])]}		-- record constructors + field names
%%]

%%[93
DATA Decl
  | FusionDecl      fuseNm          : {HsName}
                    -- with         : {HsName}
  | FusionConv      conNm           : {HsName}
                    absNm           : {HsName}
%%]

%%[1010.Decl
DATA Decl
  | DynTySig        nm              : {HsName}
                    tyExpr          : TyExpr
  | DynVal          nm              : {HsName}
                    expr            : Expr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.TyExpr
DATA TyExpr
  | Con             nm              : {HsName}
  | App             func            : TyExpr
                    arg             : TyExpr
  | AppTop          tyExpr          : TyExpr
  | Parens          tyExpr          : TyExpr
  | Ann             ann             : TyExprAnn
                    tyExpr          : TyExpr
%%]

%%[2.TyExpr
DATA TyExpr
  | Wild											-- wildcard tyvar over which the TyExpr will not quantify, but later let binding will
  | Mono											-- same as Wild, but no quantification in the let binding either
%%]

%%[3.TyExpr
DATA TyExpr
  | Var             nm              : {HsName}
%%]

%%[3.TyExpr.VarWild
DATA TyExpr
  | VarWild         nm              : {HsName}
%%]

%%[4
DATA TyExpr
  | Quant           qu              : {TyQu}
                    tyVar           : {HsName}
                    tyExpr          : TyExpr
%%]

%%[7
DATA TyExpr
  | Row             rowTyExpr       : RowTyExpr
%%]

%%[9
DATA TyExpr
  | Pred            prExpr          : PrExpr
  | Impls
  | NoImpls
%%]

%%[11
DATA TyExpr
  | Lam             tyVar           : {HsName}
                    tyExpr          : TyExpr
%%]

%%[5
TYPE TyExprs        = [TyExpr]

DATA TyVar
  | Var             nm              : {HsName}

TYPE TyVars         = [TyVar]

SET AllTyVar        = TyVar TyVars
%%]

%%[31
TYPE MbTyExpr       = MAYBE TyExpr
%%]

%%[1.AllTyExpr
SET AllTyExpr
    = TyExpr
      -- TyExprAnn
%%[[5
      TyExprs
%%]]
%%[[7
      RowTyExpr
%%]]
%%[[9
      PrExpr PrExprs
%%]]
%%[[31
      MbTyExpr
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data based record
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
DATA DataFieldExpr
  | Upd             dataFieldExpr   : DataFieldExpr
                    nm              : {HsName}
                    expr            : Expr
  | Con             nm              : {HsName}
  | Expr            expr            : Expr
%%]

%%[7
DATA DataFieldPatExpr
  | Ext             dataFieldPatExpr: DataFieldPatExpr
                    nm              : {HsName}
                    patExpr         : PatExpr
  | Con             nm              : {HsName}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, rows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
DATA RecExpr
  | Empty
  | Ext             recExpr         : RecExpr
                    mbNm            : {Maybe HsName}
                    expr            : Expr
  | Upd             recExpr         : RecExpr
                    nm              : {HsName}
                    expr            : Expr
  | Expr            expr            : Expr
%%]

%%[7
DATA RecPatExpr
  | Empty
  | Ext             recPatExpr      : RecPatExpr
                    mbNm            : {Maybe HsName}
                    patExpr         : PatExpr
  | Expr            patExpr         : PatExpr
%%]

%%[7
DATA RowTyExpr
  | Empty
  | Ext             rowTyExpr       : RowTyExpr
                    mbNm            : {Maybe HsName}
                    tyExpr          : TyExpr
%%]

%%[9
DATA RowTyExpr
  | Var             nm              : {HsName}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
DATA PrExpr
  | Class           nm              : {HsName}
                    tyExprs         : TyExprs
  | Arrow           arg             : PrExpr
                    res             : PrExpr
  | Forall          tyVar           : {HsName}
                    prExpr          : PrExpr

TYPE PrExprs        = [PrExpr]
%%]
  | Impls
  | NoImpls

%%[10
DATA PrExpr
  | Lacks           rowTyExpr       : RowTyExpr
                    nm              : {HsName}
  | DynVar          nm              : {HsName}
                    tyExpr          : TyExpr
%%]

%%[31
DATA PrExpr
  | Eq              tyExpr1         : TyExpr
                    tyExpr2         : TyExpr
%%]

%%[9
SET AllPrExpr       = PrExpr PrExprs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6.KiExpr
DATA KiExpr
  | Con             nm              : {HsName}
  | Var             nm              : {HsName}
  | App             func            : KiExpr
                    arg             : KiExpr
  | AppTop          kiExpr          : KiExpr
  | Parens          kiExpr          : KiExpr
  | Ann             ann             : KiExprAnn
                    kiExpr          : KiExpr

SET AllKiExpr
  = KiExpr
    -- KiExprAnn
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expression
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Expr
DATA Expr
  | IConst          int             : {Int}
  | CConst          char            : {Char}
  | Con             nm              : {HsName}
  | Var             nm              : {HsName}
  | App             func            : Expr
                    arg             : Expr
%%[[1
  | Let             decls           : Decls
%%][8
  | Let             isStrict        : {Bool}
                    decls           : Decls
%%]]
                    body            : Expr
  | Lam             arg             : PatExpr
                    body            : Expr
  | AppTop          expr            : Expr
  | Parens          expr            : Expr
  | TypeAs          isScoped		: {Bool}			-- ^ Are the type vars in 'tyExpr' to be lexically scoped? Used for: f a :: t = e, rewritten to \a -> (e :: t)
                    tyExpr          : TyExpr
                    expr            : Expr
  | Ann             ann             : ExprAnn
                    expr            : Expr
%%]

%%[4
DATA Expr
  | AppImpred       func            : Expr
                    arg             : Expr
%%]

%%[5
DATA Expr
  | SConst          str             : {String}
  | Case            expr            : Expr
                    alts            : CaseAlts
%%[[8
                    mbCaseIds       : {Maybe UIDS}
                    caseFailS       : {UIDS}			-- can fail on these fail ids, encodes that this case implements a guard
                    isTupOfArg      : {Bool}			-- tupling, only done as uncurry of arguments of lambda
%%]]
%%]

%%[7
DATA Expr
  | DataFields      dataFieldExpr   : DataFieldExpr
  | Rec             recExpr         : RecExpr
  | Sel             expr            : Expr
                    lbl             : {HsName}
%%]

%%[8
DATA Expr
  | Undefined
  | CaseAltFail     caseId          : {UID}
%%]

%%[12
DATA Expr
  | AppImpl         func            : Expr
                    argPr           : PrExpr
                    arg             : Expr
  | LamImpl         argPr           : PrExpr
                    arg             : PatExpr
                    body            : Expr
%%]

%%[10.Expr
DATA Expr
  | DynVar          nm              : {HsName}
%%]

%%[97.Expr
DATA Expr
  | IIConst         integer         : {Integer}
%%]

%%[1.AllExpr
SET AllExpr
    = Expr
      -- ExprAnn
%%[[7
      RecExpr DataFieldExpr
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.PatExpr
DATA PatExpr
  | IConst          int             : {Int}
  | CConst          char            : {Char}
  | Con             nm              : {HsName}
  | Var             nm              : {HsName}
  | VarAs           nm              : {HsName}
                    patExpr         : PatExpr
  | App             func            : PatExpr
                    arg             : PatExpr
  | AppTop          patExpr         : PatExpr
  | Parens          patExpr         : PatExpr
  | Ann             ann             : PatExprAnn
                    patExpr         : PatExpr
%%]
      
%%[4
DATA PatExpr
  | TypeAs          tyExpr          : TyExpr
                    patExpr         : PatExpr
%%]

%%[5
DATA PatExpr
  | SConst          str             : {String}
%%]

%%[7
DATA PatExpr
  | Rec             recPatExpr      : RecPatExpr
  | DataFields      dataFieldPatExpr: DataFieldPatExpr
%%]

%%[8
DATA PatExpr
  | Irrefutable     patExpr         : PatExpr
  | Bang	     	patExpr         : PatExpr
%%]

%%[97
DATA PatExpr
  | Expr            expr            : Expr
                    mbConst         : {Maybe SrcConst}
%%]

%%[1.AllPatExpr
SET AllPatExpr
    = PatExpr
      -- PatExprAnn
%%[[7
      RecPatExpr DataFieldPatExpr
%%]]
%%]
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pattern + guard in case expressions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5
DATA CaseAlt
  | Pat             patExpr         : PatExpr
                    expr            : Expr

TYPE CaseAlts       = [CaseAlt]

SET AllCase         = CaseAlt CaseAlts
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data constructor
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5.DataConstr1
DATA DataConstr
  | Constr          conNm           : {HsName}
%%[[91
                    mbFixityPrio    : {Maybe (Int,Fixity)}       -- Nothing: not infix
%%]]
%%[[5
                    fields          : TyExprs
%%][7
                    fields          : DataFields
%%]]
%%[[31
					mbGadtTyExpr	: MbTyExpr			-- the constrained result ty for GADT
%%]]
%%[[41
                    eqs             : DataConstrEqs
%%]]
%%]

%%[5.DataConstr2
TYPE DataConstrs    = [DataConstr]
%%]

%%[7.Data
DATA DataField
  | Field           mbLabels        : {Maybe [HsName]}
                    tyExpr          : TyExpr

TYPE DataFields     = [DataField]
%%]

%%[41.Data
DATA DataConstrEq
  | Eq              tyVar           : TyVar
                    tyExpr          : TyExpr

TYPE DataConstrEqs  = [DataConstrEq]
%%]

%%[40.Data
DATA DataConstrEq
  | Eq              tyVar           : TyVar
                    tyExpr          : TyExpr

TYPE DataConstrEqs  = [DataConstrEq]
%%]

%%[5
SET AllDataConstr   = DataConstr DataConstrs
%%]

%%[7
SET AllDataField    = DataField DataFields
%%]

%%[41
SET AllDataConstrEq = DataConstrEq DataConstrEqs
%%]

%%[5.SetsData
SET AllData
    = AllDataConstr
%%[[7
      AllDataField
%%]]
%%[[41
      AllDataConstrEq
%%]]
%%]

%%[40.SetsData -7.SetsData
SET AllDataConstrEq = DataConstrEq DataConstrEqs
SET AllDataField    = DataField DataFields
SET AllData         = AllDataField AllDataConstr AllDataConstrEq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class & instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
DATA Decl
  | Class           tyPrExpr        : TyExpr
%%[[15
                    funcDeps        : FuncDeps
%%]]
                    mbDefaultInstNm : {Maybe HsName}
                    decls           : Decls
%%[[92
					generDerivs		: {[(HsName,HsName)]}			-- generically derivable fields, with their default
%%]]
  | Instance        mbNmElim        : {Maybe (HsName,Bool)}
                    instVariant     : InstVariant
                    tyPrExpr        : TyExpr
                    decls           : Decls
  | InstanceIntro   mbNmElim        : {Maybe (HsName)}
                    expr            : Expr
                    prExpr          : PrExpr
  | Default         nm              : HsName
                    tyExprs         : TyExprs
%%]

%%[15
DATA FuncDep
  | Dep             fromTvs         : TyVars
                    toTvs           : TyVars

TYPE FuncDeps       = [FuncDep]

SET AllFuncDep      = FuncDep FuncDeps
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
DATA ExprAnn
  | Empty

DATA TyExprAnn
  | Empty
%%[[(8 codegen)
  | Strictness      strictness      : Strictness
%%]]

DATA PatExprAnn
  | Empty
%%]

%%[6
DATA KiExprAnn
  | Empty
%%]

%%[1
SET AllAnn
    = ExprAnn TyExprAnn PatExprAnn
%%[[6
      KiExprAnn
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Mono restrictions on data type annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2
TYPE AnnDtMonoRestrictions = [AnnDtMonoRestrict]

DATA AnnDtMonoRestrict
  | Global          nm              : {HsName}
  | Local           from            : {HsName}
                    to              : {HsName}

DERIVING AnnDtMonoRestrict : Eq, Ord

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Groups of nonterminals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.AllNT
SET AllNT
    = AllTyExpr AllDecl AllPatExpr AllExpr
%%[[5
      AllData AllCase AllTyVar
%%]]
%%[[6
      AllKiExpr
%%]]
%%[[15
      AllFuncDep
%%]]
%%]

%%[8
SET NTCode
    = AllDecl AllExpr AllCase AllPatExpr
%%]

%%[9
SET NTPrf
    = NTCode AllData
%%]


