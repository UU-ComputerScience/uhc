%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data, placeholders, known ki use
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(5 hmtyinfer).tyGam
SEM Decl
  | Data        tyVars      .   tyGam               =   emptyGam
                lhs         .   patTyGam            =   gamAdd @tyNm (TyGamInfo (appCon @tyNm)
%%[[(8 counting)
                                                                            [] (CA.Type_Error "data-patTyGam")
%%]]
                                                          ) @lhs.patTyGam
                constrs     .   tyGam               =   gamPushGam @tyVars.tyGam @lhs.tyGam
%%]

%%[(6 hmtyinfer)
SEM Decl
  | Data        loc         .   dataTgi             =   mkTGI (appCon @tyNm)
%%[[(8 counting)
                                                                            [] (CA.Type_Error "data-dataTgi")
%%]]
                            .   dataTkgi            =   TyKiGamInfo (tyEnsureNonAny @lUniq @knKi)
                            .   dataPatTyGam        =   if @hasKiSig  then @lhs.patTyGam
                                                                      else gamAdd @tyNm @dataTgi @lhs.patTyGam
                            .   dataPatTyKiGam      =   if @hasKiSig  then @lhs.patTyKiGam
                                                                      else tyKiGamNameSingleton @tyNm @dataTkgi `gamUnion` @lhs.patTyKiGam
                lhs         .   patTyGam            :=  gamUnion @extraTyGam   @dataPatTyGam
                            .   patTyKiGam          =   gamUnion @extraTyKiGam @dataPatTyKiGam
                loc         .   fo_                 =   fitsIn  strongFIOpts defaultFIEnv @lUniq2 @lhs.patKiVarMp
                                                                (@tyVars.kiL `appArr` kiStar) (tkgiKi @dataTkgi)
                            .   dataKi              =   foTy @fo_
                lhs         .   patKiVarMp          =   foVarMp @fo_ `varUpd` @lhs.patKiVarMp
                constrs     .   tyKiGam             =   gamPushGam  (tyKiGamInst1Exists @lUniq3 (@lhs.kiVarMp `varUpd` @tyVars.tyKiGam))
                                                                    @lhs.tyKiGam
                loc         .   lUniq               :   UNIQUEREF gUniq
                loc         .   lUniq2              :   UNIQUEREF gUniq
                loc         .   lUniq3              :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(6 hmtyinfer)
SEM DataConstr
  | Constr      loc         .   fldsKiVarMp         =   @fields.kiVarMp
                            .   (_,fo_)             =   fitsInL  weakFIOpts defaultFIEnv @lUniq @fldsKiVarMp
                                                                 @fields.kiL (repeat kiStar)
%%[[6
                lhs
%%][31
                mbGadtTyExpr
%%]]
                            .   kiVarMp             =   foVarMp @fo_ `varUpd` @fldsKiVarMp
                loc         .   lUniq               :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data info gam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7.dataGam
ATTR
  AllDecl AllExpr -- AllCase
%%[[97
  -- AllPatExpr
%%]]
    [ | gathDataGam: DataGam | ]
ATTR AGItf [ | | gathDataGam: DataGam ]

SEM AGItf
  | AGItf       expr        .   gathDataGam         =   emptyGam

%%[[(8 counting)
SEM AGItf
  | AGItf
    lhs.gathDataGam = traceShow "lengths" $ traceShow (length $ show $ gamToAssocDupL $ @loc.gathTyGam, length $ show $ gamToAssocDupL $ @lhs.tyGam, length $ show $ gamToAssocDupL $ @expr.gathDataGam) expandTypeDefs @loc.gathTyGam @lhs.tyGam @expr.gathDataGam

{
traceShow :: Show a => a -> b -> b
-- traceShow x = T.traceShow (length $ show x)
-- traceShow x = id
traceShow x = seq (length $ show x)
-- traceShow = T.traceShow

expandTypeDefs :: TyGam -> TyGam -> DataGam -> DataGam
-- expandTypeDefs ltg tg d = d
-- expandTypeDefs = expandTypeDefs' True
-- expandTypeDefs ltg tg d = ltg `seq` tg `seq` d `seq` if change then expandTypeDefs ltg tg d' else d'
expandTypeDefs ltg tg d = traceShow ("gamkengt", length $ show $ gamToAssocDupL d') d'
  where d' = traceShow "iterTrue" $ gamMap expandTypeDefsDgi d
        
        expandTypeDefsDgi :: (HsName, DataGamInfo) -> (HsName, DataGamInfo)
        expandTypeDefsDgi (k,dgi) = traceShow dtis (k, dgi {dgiConstrTagMp = Map.fromList dtis})
          where dtis = map expandTypeDefsDti $ Map.toList $ dgiConstrTagMp dgi

        expandTypeDefsDti :: (HsName, DataTagInfo) -> (HsName, DataTagInfo)
        expandTypeDefsDti (n, dti) = traceShow fields (n, dti {dtiFldAnnTyL = fields})
          where fields = map expandTypeDefsField $ dtiFldAnnTyL dti

        expandTypeDefsField :: CA.Field -> CA.Field
        expandTypeDefsField  (CA.Field_Lazy t) = traceShow t' CA.Field_Lazy t'
          where t' = expandTypeDefsRhoType t
        expandTypeDefsField  (CA.Field_Strict t) = traceShow t' CA.Field_Strict t'
          where t' = expandTypeDefsRhoType t

        expandTypeDefsType :: CA.Type -> CA.Type
        expandTypeDefsType t@(CA.Type_Data n as ts)
          -- | n == mkHNm "_Rec" = traceShow ("trec:", n) trec
          | n == mkHNm "_Rec" = traceShow trec trec
          -- | isJust mt && isNothing mdt && n /= mkHNm "Char" && n /= mkHNm "Int" = traceShow ("ttype:", n) ty'
          | isJust mt && isNothing mdt && n /= mkHNm "Char" && n /= mkHNm "Int" = traceShow ty' ty'
          -- | otherwise = traceShow ("tot:", n, fields) $ CA.Type_Data n as fields
          | otherwise = traceShow (n,as,fields) CA.Type_Data n as fields
          where fields = map expandTypeDefsType ts
                mt' = n `tyGamLookup` ltg <|> n `tyGamLookup` tg
                mt = case mt' of
                      Nothing -> Nothing
                      Just x -> case tgiAnnTy x of
                        CA.Type_Error _ -> Nothing
                        _ -> Just x 
                mdt = n `dataGamLookup` d
                tgi = fromJust mt
                ty = tgiAnnTy tgi
                ans = tgiAnnVars tgi
                tvs = tgiTyVars tgi
                idAnn (x, CA.Annotation_Var y) = x /= y
                idAnn _ = True
                idTy (x, CA.Type_Var y) = x /= y
                idTy _ = True
                asol = Map.fromList $ filter idAnn $ zip ans as
                tsol = Map.fromList $ filter idTy $ zip tvs fields
                ty' = if length ans == length as && length tvs == length fields then S.substB False ty asol tsol Map.empty
                  else error $ show (mt, mdt, "lengths don't match for " ++ show n ++ ": " ++ show (as, ans) ++ show (fields, tvs) ++ ". Type: " ++ show ty)
                trec = if (length ts /= 1) then error ("_rec is no singleton" ++ show ts)  else head ts
        expandTypeDefsType  (CA.Type_App t1 t2) = traceShow (t1', t2') CA.Type_App t1' t2'
          where t1' = expandTypeDefsType t1
                t2' = expandTypeDefsType t2
        expandTypeDefsType  (CA.Type_Func t1 t2) = traceShow (t1', t2') CA.Type_Func t1' t2'
          where t1' = expandTypeDefsRhoType t1
                t2' = expandTypeDefsEtaType t2
        expandTypeDefsType  (CA.Type_Tup ts) = traceShow fields CA.Type_Tup fields
          where fields = map expandTypeDefsRhoType ts
        expandTypeDefsType kv = traceShow kv kv

        expandTypeDefsRhoType :: CA.RhoType -> CA.RhoType
        expandTypeDefsRhoType (CA.RhoType_Rho t a) = traceShow (t', a) CA.RhoType_Rho t' a
          where t' = expandTypeDefsEtaType t

        expandTypeDefsEtaType :: CA.EtaType -> CA.EtaType
        expandTypeDefsEtaType (CA.EtaType_Eta t a) = traceShow (t', a) $ CA.EtaType_Eta t' a
          where t' = expandTypeDefsType t

-- expandTypeDefs :: TyGam -> TyGam -> DataGam -> DataGam
-- -- expandTypeDefs ltg tg d = d
-- -- expandTypeDefs = expandTypeDefs' True
-- -- expandTypeDefs ltg tg d = ltg `seq` tg `seq` d `seq` if change then expandTypeDefs ltg tg d' else d'
-- expandTypeDefs ltg tg d = traceShow ("gamkengt", length $ show $ gamToAssocDupL d') d'
--   where (d', change) = traceShow "iterTrue" $ gamMapThr expandTypeDefsDgi False d
        
--         expandTypeDefsDgi :: (HsName, DataGamInfo) -> Bool -> ((HsName, DataGamInfo), Bool)
--         expandTypeDefsDgi (k,dgi) c = ((k, dgi {dgiConstrTagMp = Map.fromList dtis}), or (c:cs))
--           where (dtis, cs) = unzip $ map expandTypeDefsDti $ Map.toList $ dgiConstrTagMp dgi

--         expandTypeDefsDti :: (HsName, DataTagInfo) -> ((HsName, DataTagInfo), Bool)
--         expandTypeDefsDti (n, dti) = ((n, dti {dtiFldAnnTyL = fields}), or cs)
--           where (fields, cs) = unzip $ map expandTypeDefsField $ dtiFldAnnTyL dti

--         expandTypeDefsField :: CA.Field -> (CA.Field, Bool)
--         expandTypeDefsField  (CA.Field_Lazy t) = (CA.Field_Lazy t', c')
--           where (t',c') = expandTypeDefsRhoType t
--         expandTypeDefsField  (CA.Field_Strict t) = (CA.Field_Strict t', c')
--           where (t',c') = expandTypeDefsRhoType t

--         expandTypeDefsType :: CA.Type -> (CA.Type, Bool)
--         expandTypeDefsType  (CA.Type_Data n as ts)
--           | n == mkHNm "_Rec" = traceShow ("trec:", n) $ (trec, True)
--           -- | isJust mt && isNothing mdt && n /= mkHNm "Char" && n /= mkHNm "Int" = traceShow ("Subst: ", show n) (ty', True)
--           | isJust mt && isNothing mdt && n /= mkHNm "Char" && n /= mkHNm "Int" = traceShow ("ttype:", n) $ (ty', True)
--           | otherwise = traceShow ("tot:", n, fields) $ (CA.Type_Data n as fields, or cs)
--           -- | otherwise = (CA.Type_Data n as ts, False)
--           where (fields, cs) = unzip $ map expandTypeDefsType ts
--                 mt = n `tyGamLookup` ltg <|> n `tyGamLookup` tg
--                 mdt = n `dataGamLookup` d
--                 tgi = fromJust mt
--                 ty = tgiAnnTy tgi
--                 ans = tgiAnnVars tgi
--                 tvs = tgiTyVars tgi
--                 asol = Map.fromList $ zip ans as
--                 tsol = Map.fromList $ zip tvs fields
--                 ty' = if length ans == length as && length tvs == length fields then S.substSolution ty (CA.Solution asol tsol Map.empty)
--                   else error ("lengths don't match for " ++ show n ++ ": " ++ show (as, ans) ++ show (fields, tvs) ++ ". Type: " ++ show ty)
--                 trec = if (length ts /= 1) then error ("_rec is no singleton" ++ show ts)  else head ts
--         expandTypeDefsType  (CA.Type_App t1 t2) = (CA.Type_App t1' t2', c1 || c2)
--           where (t1',c1) = expandTypeDefsType t1
--                 (t2',c2) = expandTypeDefsType t2
--         expandTypeDefsType  (CA.Type_Func t1 t2) = (CA.Type_Func t1' t2', c1 || c2)
--           where (t1',c1) = expandTypeDefsRhoType t1
--                 (t2',c2) = expandTypeDefsEtaType t2
--         expandTypeDefsType  (CA.Type_Tup ts) = (CA.Type_Tup fields, or cs)
--           where (fields, cs) = unzip $ map expandTypeDefsRhoType ts
--         expandTypeDefsType kv = (kv, False)

--         expandTypeDefsRhoType :: CA.RhoType -> (CA.RhoType, Bool)
--         expandTypeDefsRhoType (CA.RhoType_Rho t a) = (CA.RhoType_Rho t' a, c')
--           where (t',c') = expandTypeDefsEtaType t

--         expandTypeDefsEtaType :: CA.EtaType -> (CA.EtaType, Bool)
--         expandTypeDefsEtaType (CA.EtaType_Eta t a) = (CA.EtaType_Eta t' a, c')
--           where (t',c') = expandTypeDefsType t
}
%%]]

SEM CaseAlt
  | Pat         expr        .   gathDataGam         =   emptyGam

%%[[97
SEM PatExpr
  | Expr        expr        .   gathDataGam         =   emptyGam
%%]]
%%]

%%[(7 hmtyinfer)
ATTR AllDecl AllExpr AllCase AllPatExpr [ dataGam: DataGam | | ]
%%]

%%[(7 hmtyinfer).initDataGam
SEM AGItf
  | AGItf       expr        .   dataGam             =   @expr.gathDataGam
%%]

%%[(50 hmtyinfer) -7.initDataGam
ATTR AGItf [ dataGam: DataGam | | ]

SEM AGItf
  | AGItf       expr        .   dataGam             = specialTgiTrace @loc.gathTyGam $ specialtrace @expr.gathDataGam `gamUnion` @lhs.dataGam

{
specialtrace :: DataGam -> DataGam
-- specialtrace = id
specialtrace dg = T.traceShow ("DataGam: ", vlist $ map ppLatex dgl) dg
  where dgl = map f $ gamToAssocL dg
        f (n, dgi) = (n, dgiTyVars dgi, dgiAnnVars dgi, Map.map (\x -> dtiFldAnnTyL x) $ dgiConstrTagMp dgi) 

specialTgiTrace :: TyGam -> a -> a
-- specialTgiTrace tg = id
specialTgiTrace tg = T.traceShow ("TyGam: ", vlist $ map ppLatex tgl)
  where tgl = map f $ gamToAssocL tg
        f (n, tgi) = (n, tgiAnnTy tgi) 

deriving instance Show TyExpr
deriving instance Show PrExpr
deriving instance Show TyExprAnn
deriving instance Show RowTyExpr
}

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Building annotated dataGam for Counting analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 counting)

ATTR AllNT [ caDataGam: {DataGam} caTyGam: {TyGam} | caFreshVar: {CA.Var} | ]
ATTR AllNT [ caIota: {Int} caLocalDataGam: {Map.Map HsName Int} | | ]
ATTR Decl Decls DataFields DataField TyExpr TyExprs PrExpr PrExprs RowTyExpr DataConstrs DataConstr [ caLocalDataNames: {Set.Set HsName} caLocalAnnVars: {[HsName]} | | ]
ATTR Decl [  | | caLocalDataNamesGath:  {Set.Set HsName} caLocalAnnVarsGath: {[HsName]} caLocalDataGamGath: {Map.Map HsName Int}]
ATTR Decls [ | | caLocalDataNamesGath USE {Set.union} {Set.empty}: {Set.Set HsName} caLocalAnnVarsGath USE {++} {[]}: {[HsName]} caLocalDataGamGath USE {Map.union} {Map.empty} : {Map.Map HsName Int} ]
ATTR TyExpr [ | | caIsFunc: {Maybe Bool} ]
ATTR TyExpr PrExpr [ | | caType: {CA.Type}]
ATTR TyExpr TyExprAnn [ | | caIsStrict USE {(||)} {False}: {Bool}]
ATTR DataFields [ | | caFields USE {(++)} {[]}: {[CA.Field]}]
ATTR DataField [ | | caFields: {[CA.Field]}]
ATTR TyVars [ | | caTyVars USE {(++)} {[]}: {[HsName]} caExTyVars USE {(++)} {[]}: {[HsName]} ]
ATTR TyExpr [ | | caClassExTyVars: {[HsName]} ]
ATTR TyVar TyExpr [ | | caTyVars: {[HsName]} caExTyVars: {[HsName]} ]
ATTR RowTyExpr [ | | caTypes: {[CA.Type]} caLength: {Int}]
ATTR TyExpr PrExpr PrExprs TyExprs RowTyExpr [ caLevel: {Int} | | ]
ATTR PrExpr [ | | caDictNm: {HsName} ]
ATTR Expr Decl Decls [ | | caGathTyGam USE {Map.union} {Map.empty}: {Map.Map HsName ([HsName], [HsName], CA.Type)}]
ATTR Decl Decls [ | | caClassTySigs USE {++} {[]}: {[(HsName, CA.Field)]} ]
ATTR Decl Decls [ | | caClassExTyVars USE {++} {[]}: {[HsName]}]
ATTR TyExprs [ | | caTypes: {[CA.Type]}]
ATTR TyExpr PrExpr TyExprs PrExprs [ | | caPrExprs USE {(++)} {[]}: {[(HsName, CA.Field)]}]

ATTR * [ | | copy: SELF]

SEM TyExpr
  | Pred
    lhs.caPrExprs = (@prExpr.caDictNm, CA.Field_Lazy $ CA.RhoType_Rho (CA.EtaType_Eta @prExpr.caType @loc.nu) @loc.delta) : @prExpr.caPrExprs
    loc.(nu,delta,fv) = if 0 < @lhs.caIota then 
                            (CA.Annotation_Var $ mkHNm @lhs.caFreshVar, CA.Annotation_Var $ mkHNm $ @lhs.caFreshVar + 1, @lhs.caFreshVar + 2) 
                          else (CA.annTop, CA.annTop, @lhs.caFreshVar)
    prExpr.caFreshVar = @loc.fv
  -- | Con Wild Mono Var VarWild Row Impls NoImpls
  --   lhs.caPrExprs = []

SEM TyVar
  | Var
    lhs.caTyVars = [@nm]
    lhs.caExTyVars = [@nm]

SEM AGItf
  | AGItf
    expr.caFreshVar = 0
    expr.caDataGam = @lhs.dataGam
    expr.caTyGam = @lhs.tyGam
    expr.caLocalDataGam = Map.empty
    expr.caIota = 4

SEM Expr
  | Let
    decls.caLocalDataNames = @decls.caLocalDataNamesGath
    decls.caLocalAnnVars = @decls.caLocalAnnVarsGath
    body.caLocalDataGam = Map.union @lhs.caLocalDataGam @decls.caLocalDataGamGath

SEM Decl
  | Data Type
    lhs.caLocalDataNamesGath = Set.singleton @tyNm
    lhs.caLocalDataGamGath = Map.singleton @tyNm (length @lhs.caLocalAnnVars)
  | Data
    lhs.caLocalAnnVarsGath = map mkHNm [@lhs.caFreshVar .. @constrs.caFreshVar - 1]
  | Type TySig
    tyExpr.caLevel = 1
  | Type
    lhs.caLocalAnnVarsGath = map mkHNm [@lhs.caFreshVar .. @tyExpr.caFreshVar - 1]
    lhs.caGathTyGam = Map.singleton @tyNm (@lhs.caLocalAnnVars, nub @tyExpr.caTyVars, @tyExpr.caType)
  | TySig
    lhs.caClassTySigs = [(@nm, CA.Field_Lazy $ CA.RhoType_Rho (CA.EtaType_Eta @tyExpr.caType @loc.nu) @loc.delta)]
    loc.(nu,delta,fv) = if 0 < @lhs.caIota then 
                            (CA.Annotation_Var $ mkHNm @lhs.caFreshVar, CA.Annotation_Var $ mkHNm $ @lhs.caFreshVar + 1, @lhs.caFreshVar + 2) 
                          else (CA.annTop, CA.annTop, @lhs.caFreshVar)
    tyExpr.caFreshVar = @loc.fv
    lhs.caClassExTyVars = @tyExpr.caClassExTyVars
  | Class
    lhs.caLocalAnnVarsGath = map mkHNm [@lhs.caFreshVar .. @decls.caFreshVar - 1]
    lhs.caLocalDataNamesGath = Set.singleton @dataDictNm
    lhs.caLocalDataGamGath = Map.singleton @dataDictNm (length @lhs.caLocalAnnVars)
    lhs.caClassTySigs = []
    lhs.caClassExTyVars = []
    loc.caClassTyVars = extractVarNames $ snd $ last @tyPrExpr.caPrExprs
    loc.camap = Map.fromList $ map (first show) $ init @tyPrExpr.caPrExprs ++ @decls.caClassTySigs
    loc.caClassTySigsWithPred = traceShow ("prExpr:", @tyPrExpr.copy, @tyPrExpr.caPrExprs) $ Map.elems @loc.camap
    tyPrExpr.caLevel = 1

{
extractVarNames :: CA.Field -> [HsName]
extractVarNames f = extractVarNamesData $ CA.getType f
  where extractVarNamesData (CA.Type_Data _ _ ts) = map extractVarNamesType ts
        extractVarNamesType (CA.Type_Var v) = v
}

SEM DataField
  | Field
    loc.rhoType = CA.RhoType_Rho (CA.EtaType_Eta @tyExpr.caType @loc.nu) @loc.delta
    lhs.caFields = [(if @tyExpr.caIsStrict then CA.Field_Strict else CA.Field_Lazy) @loc.rhoType]
    tyExpr.caLevel = 1
    loc.(nu,delta,fv) = if 0 < @lhs.caIota then 
                            (CA.Annotation_Var $ mkHNm @lhs.caFreshVar, CA.Annotation_Var $ mkHNm $ @lhs.caFreshVar + 1, @lhs.caFreshVar + 2) 
                          else (CA.annTop, CA.annTop, @lhs.caFreshVar)
    tyExpr.caFreshVar = @loc.fv

SEM RowTyExpr
  | Empty
    lhs.caTypes = []
    lhs.caLength = 0
  | Ext
    lhs.caTypes = @rowTyExpr.caTypes ++ [@tyExpr.caType]
    lhs.caLength = @rowTyExpr.caLength + 1    
  | Var
    lhs.caTypes = panic "Unsupported Var case of RowTyExpr (types)"
    lhs.caLength = panic "Unsupported Var case of RowTyExpr (length)"

SEM TyExprAnn
  | Strictness
    lhs.caIsStrict = @strictness /= Strictness_NonStrict

SEM TyExprs
  | Cons
    lhs.caTypes = @hd.caType : @tl.caTypes
  | Nil
    lhs.caTypes = []

SEM PrExpr
  | Class
    loc.dictName = hsnClass2Dict @nm
    loc.caToAnn = if @lhs.caLevel < @lhs.caIota then CA.Annotation_Var else const CA.annTop 
    loc.localGroup = Set.member @dictName @lhs.caLocalDataNames 
    tyExprs.caFreshVar = if @lhs.caLevel < @lhs.caIota then @lhs.caFreshVar + @loc.caNumAnn else @lhs.caFreshVar
    loc.caNumAnn = fromJust $ @loc.caNumLoc <|> @loc.caNumLdg <|> @loc.caNumIdg <|> @loc.caNumPanic
       .caNumLoc = if @loc.localGroup then Just 0 else Nothing
       .caNumLdg = Map.lookup @dictName @lhs.caLocalDataGam
       .caNumIdg = fmap (length . dgiAnnVars) $ @dictName `dataGamLookup` @lhs.caDataGam
       .caNumPanic = Just $ panic $ "Could not find class data type " ++ show @loc.dictName
    loc.anns = map (\x -> @loc.caToAnn $ mkHNm $ show $ @lhs.caFreshVar + x) [0 .. @loc.caNumAnn - 1]
    loc.tys = @tyExprs.caTypes
    lhs.caType = if @loc.localGroup then CA.Type_Data @dictName (map @loc.caToAnn @lhs.caLocalAnnVars) @loc.tys
                  else CA.Type_Data @dictName (map (\x -> @loc.caToAnn $ mkHNm $ show $ @lhs.caFreshVar + x) [0 .. @loc.caNumAnn - 1]) @loc.tys
    lhs.caDictNm = @loc.dictName
  | * - Class
    lhs.caType = panic "Unsupported construct during data type annotation algorithm: Pred"
    lhs.caDictNm = panic "Unsupported construct during data type annotation algorithm: Pred"


SEM TyExpr
  | Lam
    lhs.caTyVars = @tyVar : @tyExpr.caTyVars
    lhs.caExTyVars = @tyVar : @tyExpr.caExTyVars
  | * - Lam Ann
    lhs.caTyVars = []
    lhs.caExTyVars = []

SEM TyExpr
  | Lam
    lhs.caClassExTyVars = @tyVar : @tyExpr.caClassExTyVars
  | Var
    lhs.caClassExTyVars = [@nm]
  | App
    lhs.caClassExTyVars = @func.caClassExTyVars ++ @arg.caClassExTyVars 
  | * - Lam Ann Var App AppTop Parens
    lhs.caClassExTyVars = []

SEM TyExpr
  | *
    loc.caIsFunc = Nothing
    loc.caToAnn = if @lhs.caLevel < @lhs.caIota then CA.Annotation_Var else const CA.annTop 
  | Var
    lhs.caType = CA.Type_Var @nm
  | Con
    loc.ismFunc = case hsnBaseUnpack @nm of
                    Just ("->", _) -> Just True
                    _ -> Nothing
    loc.isFunc = fromMaybe False @loc.ismFunc
    loc.localGroup = Set.member @nm @lhs.caLocalDataNames 
    loc.caNumAnn = fromJust $ @loc.caNumFunc <|> @loc.caNumLoc <|> @loc.caNumLdg <|> @loc.caNumIdg <|> @loc.caNumTy <|> @loc.caNumPanic
       .caNumFunc = if @loc.isFunc then Just 0 else Nothing
       .caNumLoc = if @loc.localGroup then Just 0 else Nothing
       .caNumLdg = Map.lookup @nm @lhs.caLocalDataGam
       .caNumIdg = fmap (length . dgiAnnVars) $ @nm `dataGamLookup` @lhs.caDataGam
       .caNumTy = fmap (length . tgiAnnVars) $ @nm `tyGamLookup` @lhs.caTyGam
       .caNumPanic = Just $ error $ "Could not find data type " ++ show @nm
    lhs.caType = if @loc.localGroup then CA.Type_Data @nm (map @loc.caToAnn @lhs.caLocalAnnVars) []
                  else CA.Type_Data @nm (map (\x -> @loc.caToAnn $ mkHNm $ show $ @lhs.caFreshVar + x) [0 .. @loc.caNumAnn - 1])  []
    lhs.caFreshVar = if @lhs.caLevel < @lhs.caIota then @lhs.caFreshVar + @loc.caNumAnn else @lhs.caFreshVar
    lhs.caIsFunc = @loc.ismFunc
  | App
    lhs.caIsFunc = case @func.caIsFunc of
                    Just True -> Just False
                    _ -> Nothing
    lhs.caType = case @func.caIsFunc of
                    Just True -> @arg.caType
                    Just False -> CA.Type_Func (CA.RhoType_Rho (CA.EtaType_Eta @func.caType @loc.nu1) @loc.delta) $ CA.EtaType_Eta @arg.caType @loc.nu2
                    _ -> case @func.caType of
                          CA.Type_Data n ann ty -> CA.Type_Data n ann (ty ++ [@arg.caType])
                          CA.Type_Var _ -> CA.Type_App @func.caType @arg.caType
                          CA.Type_App{} -> CA.Type_App @func.caType @arg.caType
                          _ -> CA.Type_Error $ "not supported left hand side of application" ++ show @func.caType
    loc.(nu1,delta, nu2,fv) = if @lhs.caLevel < @lhs.caIota && @loc.isCurFunc then 
                                (CA.Annotation_Var $ mkHNm @lhs.caFreshVar, CA.Annotation_Var $ mkHNm $ @lhs.caFreshVar + 1, CA.Annotation_Var $ mkHNm $ @lhs.caFreshVar + 2, @lhs.caFreshVar + 3) 
                              else (CA.annTop, CA.annTop, CA.annTop, @lhs.caFreshVar)
    func.caFreshVar = @loc.fv
    func.caLevel = @lhs.caLevel + 1
    loc.isCurFunc = case @func.caIsFunc of
                      Just False -> True
                      _ -> False
  | Row
    rowTyExpr.caLevel = @lhs.caLevel + 1
    loc.(nus, deltas, fv) = if (@lhs.caLevel < @lhs.caIota) then 
                              (map (CA.Annotation_Var . mkHNm) [@lhs.caFreshVar .. @lhs.caFreshVar + @rowTyExpr.caLength - 1]
                               , map (CA.Annotation_Var . mkHNm) [@lhs.caFreshVar + @rowTyExpr.caLength .. @lhs.caFreshVar + 2 * @rowTyExpr.caLength - 1]
                               , @lhs.caFreshVar + 2 * @rowTyExpr.caLength)
                            else (replicate @rowTyExpr.caLength CA.annTop, replicate @rowTyExpr.caLength CA.annTop, @lhs.caFreshVar)
    rowTyExpr.caFreshVar = @loc.fv
    lhs.caType = CA.Type_Tup $ map (\(t,u,d) -> CA.RhoType_Rho (CA.EtaType_Eta t u) d) $ zip3 @rowTyExpr.caTypes @loc.nus @loc.deltas 
  | Ann
    -- strictness through copy rule
  | AppTop
    -- copy rules
    tyExpr.caLevel = @lhs.caLevel + 1
  | Parens Pred
    -- copy rules
  
  -- TODO this is forgotten
  | Quant Lam
    tyExpr.caLevel = @lhs.caLevel + 1
  
  -- unused but prevents ag warnings
  | Wild
    lhs.caType = CA.Type_Error $ "Unsupported construct during data type annotation algorithm: Wild"
  | Mono
    lhs.caType = CA.Type_Error $ "Unsupported construct during data type annotation algorithm: Mono"
  | VarWild
    lhs.caType = CA.Type_Error $ "Unsupported construct during data type annotation algorithm: VarWild"
  | Impls
    lhs.caType = CA.Type_Error $ "Unsupported construct during data type annotation algorithm: Impls"
  | NoImpls
    lhs.caType = CA.Type_Error $ "Unsupported construct during data type annotation algorithm: NoImpls"

SEM Decl
  | FFI FFE
    tyExpr.caLevel = 100000000
  | Instance
    tyPrExpr.caLevel = 100000000
  | * - Data Type Class
    lhs.caLocalAnnVarsGath = []
    lhs.caLocalDataGamGath = Map.empty
    lhs.caLocalDataNamesGath = Set.empty
  | Default
    tyExprs.caLevel = 100000000
  | InstanceIntro
    prExpr.caLevel = 100000000
    
SEM Expr PatExpr
  | TypeAs 
    tyExpr.caLevel = 100000000
    tyExpr.caLocalAnnVars = [panic "Unused AnnVars"]
    tyExpr.caLocalDataNames = Set.empty -- panic "Unused DataNames"

SEM Expr
  | AppImpl LamImpl
    argPr.caLevel = 100000000
    argPr.caLocalAnnVars = [panic "Unused AnnVars"]
    argPr.caLocalDataNames = Set.empty -- panic "Unused DataNames"

SEM MbTyExpr
  | Just
    just.caLevel = 100000000
    just.caLocalAnnVars = [panic "Unused AnnVars"]
    just.caLocalDataNames = Set.empty -- panic "Unused DataNames"

SEM PrExpr
  | Lacks
    rowTyExpr.caLevel = 100000000
    rowTyExpr.caLocalAnnVars = [panic "Unused AnnVars"]
    rowTyExpr.caLocalDataNames = Set.empty -- panic "Unused DataNames"
  | DynVar
    tyExpr.caLevel = 100000000
    tyExpr.caLocalAnnVars = [panic "Unused AnnVars"]
    tyExpr.caLocalDataNames = Set.empty -- panic "Unused DataNames"
  | Eq
    tyExpr1.caLevel = 100000000
    tyExpr1.caLocalAnnVars = [panic "Unused AnnVars"]
    tyExpr1.caLocalDataNames = Set.empty -- panic "Unused DataNames"
    tyExpr2.caLevel = 100000000
    tyExpr2.caLocalAnnVars = [panic "Unused AnnVars"]
    tyExpr2.caLocalDataNames = Set.empty -- panic "Unused DataNames"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering tag info for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDecl [ | | gathDeclDataGam USE {`gamUnion`} {emptyGam}: DataGam ]

SEM Decl
  | Data        loc         .   dataTyVarIdL        =   map (panicJust "EH.InferData.Decl.Data.tyMbVar" . tyMbVar) @tyVars.tyL
                            .   dgi                 =   mkDGI @tyNm
                                                              ([@dataTy] `appArr` @dataAltTy)
                                                              (tkgiKi @dataTkgi)
                                                              @constrs.dataConstrNmL @constrs.dataConstrTagMp
%%[[7
                                                              @isNewtype
%%][90
                                                              (if @isNewtype
                                                               then DataGamInfoVariant_Newtype $ mkTyLam @dataTyVarIdL @constrs.dataAltForNewType
                                                               else DataGamInfoVariant_Plain
                                                              )
%%]]
%%[[92
                                                              @mbGenerInfo
%%]]
%%[[(8 counting)
                                                              @lhs.caLocalAnnVars
                                                              @tyVars.caTyVars
                                                              @tyVars.caExTyVars
%%]]
                lhs         .   gathDeclDataGam     =   gamUnion @extraDataGam $ gamSingleton @tyNm @dgi

SEM Expr
  | Let         loc         .   gathNewDataGam      =   @extraDataGam `gamUnion` @decls.gathDeclDataGam
                            .   gathBodyDataGam     =   @gathNewDataGam `gamUnion` @decls.gathDataGam
                body        .   gathDataGam         =   @gathBodyDataGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constraints induced by GADT like type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(5 hmtyinfer)
SEM DataConstr
%%[[5
  | Constr      loc         .   gadtTyVarMp         =   (emptyVarMp :: VarMp)
%%][31
  | Constr      loc         .   gadtTyVarMp         =   maybe emptyVarMp foVarMp @mbGadtFO 
%%]]
%%]

%%[(31 hmtyinfer)
SEM DataConstr
  | Constr      loc         .   mbGadtFO            =   fmap (\ty -> fitsIn (unifyFIOpts {fioDontBind = varFreeSet ty}) defaultFIEnv uidStart (emptyVarMp::VarMp) @lhs.dataTy ty) @mbGadtTyExpr.tyMb
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fields: Ty, Ann
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(5 hmtyinfer)
SEM DataConstr
  | Constr
%%[[5    
                loc         .   dataConGadtTyL      =   []
%%][31
                loc         .   dataConGadtTyL      =   [ mkTyPr $ Pred_Eq (mkTyVar v) t | (v,t) <- varmpToAssocTyL @gadtTyVarMp ]
%%]]

%%[[5
                loc         .   dataConTyL          =   @fields.tyL
%%][7
                            .   dataConFldTyL       =   @fields.fldTyL
                            .   dataConTyL          =   assocLElts @dataConFldTyL
                            .   dataConGadtFldTyL   =   zip (repeat Nothing) @dataConGadtTyL ++ @dataConFldTyL
%%]]
%%[[8
%%]]
%%]

%%[(7 hmtyinfer)
SEM DataConstr
  | Constr
                loc         .   dataConGadtFldAnnL  =   replicate (length @dataConGadtTyL)
                                                                  (DataConFldAnnInfo
%%[[8
                                                                    Strictness_NonStrict
%%]]
                                                                  )
                                                        ++ @fields.fldAnnL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of data constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(5 hmtyinfer) hs
-- | Construct type representations for constructing and deconstructing a constructor
mkDataConstrTys1 :: (TyL,FldTyL) -> Ty -> (Ty, Ty)
mkDataConstrTys1 (dataConTyL,dataConFldTyL) dataTy = (dataConTy, dataConProdTy)
  where dataConTy       = dataConTyL `appArr` dataTy
%%[[5
        dataConProdTy   = appProdApp $ assocLElts dataConFldTyL
%%][7
        dataConProdTy   = recRec $ assocLMapKey fromJust $ fldTyLEnsureLabels dataConFldTyL
%%]]

-- | Construct type representations for constructing and deconstructing a constructor
mkDataConstrTys2 :: (TyVarId -> Ty) -> Ty -> Ty -> Ty
mkDataConstrTys2 (mkMetaTy) dataConProdTy dataTy = dataQuUnConTy
  where dataConTyFv     = varFree dataTy
        dataConProdTyFv = varFree dataConProdTy
        dataQuUnConTy   = [dataTy] `appArr` mkTyQu tyQu_Exists (mkk (dataConProdTyFv \\ dataConTyFv)) dataConProdTy
          where 
%%[[5
            mkk = id
%%][6
            mkk tvs = [ (v, mkMetaTy v) | v <- tvs ] -- zip tvs (repeat kiStar) -- TBD
%%]]

mkDataConstrValGam :: HsName -> Ty -> Ty -> ValGam
mkDataConstrValGam conNm dataConTy dataQuUnConTy = assocLToGam [ (conNm, ValGamInfo dataConTy), (hsnUn conNm, ValGamInfo dataQuUnConTy) ]
%%]

%%[(7 hmtyinfer) hs
-- | Construct a kind type for a existentially quantified tyvar in the deconstructor of a datatype
-- mkDataConstrTyVarKi :: TyKiGam -> TyKiGam -> VarMp -> TyVarId -> Ty
-- mkDataConstrTyVarKi finTyKiGam intlTyKiGam tvKiVarMp = tvarKi finTyKiGam intlTyKiGam tvKiVarMp emptyVarMp
%%]

%%[(5 hmtyinfer)
ATTR AllData [ dataTy: Ty | | ]
ATTR AllDataConstr [ | patValGam: ValGam | ]

SEM DataConstr
  | Constr      loc         .   (dataConTy, dataConProdTy)
                                                    =   mkDataConstrTys1 (@dataConTyL, @dataConGadtFldTyL) @lhs.dataTy
                            .   dataQuUnConTy       =   let 
%%[[5
                                                            mkKi = const $ panic "DataConstr.Constr.mkKi: should not happen"
%%][6
                                                            mkKi = tvarKi @lhs.finTyKiGam @fields.intlTyKiGam @lhs.tvKiVarMp emptyVarMp
%%]]
                                                        in  mkDataConstrTys2 mkKi @dataConProdTy @lhs.dataTy
                loc         .   dataConTyVar        =   @lUniq_con
                            .   dataConTyAsVar      =   mkNewTyVar @lUniq_con
                            .   dataUnConTyVar      =   @lUniq_uncon
                            .   dataUnConTyAsVar    =   mkNewTyVar @lUniq_uncon
                lhs         .   patValGam           =   mkDataConstrValGam @conNm @dataConTyAsVar @dataUnConTyAsVar `gamUnion` @lhs.patValGam
                            .   patTyVarMp          =   assocTyLToVarMp [(@dataConTyVar, @gadtTyVarMp `varUpd` @dataConTy),(@dataUnConTyVar,@dataQuUnConTy)] `varUpd` @lhs.patTyVarMp
                -- Following causes cycles
                -- lhs         .   gathTySigGam        =   mkDataConstrValGam @conNm @dataConTyAsVar @dataUnConTyAsVar `-- gamUnion` @lhs.gathTySigGam
                --             .   gathTySigVarMp      =   assocTyLToVarMp [(@dataConTyVar, @gadtTyVarMp `varUpd` @dataConTy),(@dataUnConTyVar,@dataQuUnConTy)] -- `varUpd` @lhs.gathTySigVarMp
                loc         .   lUniq_con           :   UNIQUEREF gUniq
                loc         .   lUniq_uncon         :   UNIQUEREF gUniq
%%]

%%[(5 hmtyinfer)
SEM Decl
  | Data        loc         .   dataTy              =   @tyNm `appConApp` @tyVars.tyL
%%]

%%[(7 hmtyinfer)
SEM Decl
  | Data        lhs         .   patValGam           =   gamUnions
                                                          [ gamNoDups @constrs.fldSelGam
                                                          , gamNoDups @constrs.fldUpdGam
                                                          , @constrs.patValGam
                                                          ]
%%]


%%[(7 hmtyinfer)
ATTR AllDataConstr [ | | dataAltTyL USE {++} {[]}: {AssocL HsName Ty} ]

SEM DataConstr
  | Constr      loc         .   dataAltTyL          =   [(@conNm,@dataConProdTy)]

SEM Decl
  | Data        loc         .   dataAltTy           =   recSum @constrs.dataAltTyL
                            .   dataTgi             :=  mkTGIData (appCon @tyNm) Ty_Any {- ([@dataTy] `appArr` @dataAltTy) -}
%%[[(8 counting)
                                                                            [] [] (CA.Type_Error $ show @tyNm ++ " dataTgi")
%%]]
%%]
  | Constr      loc         -- .   dataConTy2          =   @dataConTyL `appArr` @lhs.dataTy 
                            -- .   dataConProdTy2      =   let  lbls = zipWith (\p (ml,_) -> maybe p id ml) positionalFldNames @dataConGadtFldTyL
                            --                             in   recRec (zipWith (\l (_,t) -> (l,t)) lbls @dataConGadtFldTyL) 
-- 
                            -- .   dataConTy           :=  @dataConTy1
                            -- .   dataConProdTy       :=  @dataConProdTy1


%%[(90 hmtyinfer)
ATTR AllDataConstr [ | | dataAltForNewType USE {`const`} {Ty_Any}: Ty ]

SEM DataConstr
  | Constr      loc         .   dataAltForNewType   =   maybeHd Ty_Any snd @dataConGadtFldTyL       -- should be only one
%%]

%%[(7777 hmtyinfer).dataConXTy
SEM DataConstr
  | Constr      loc         .   dataConTy1          =   @loc.dataConTy2
                            .   dataConProdTy1      =   @loc.dataConProdTy2
%%]

%%[(41 hmtyinfer).dataConXTy -7777.dataConXTy
SEM DataConstr
  | Constr
      (loc.dataConTy1, loc.cycVarMp) = @loc.eqsVarMp `tyAppVarLookup2_RhsOfEqOnly` @loc.dataConTy2
      (loc.dataConProdTy1, _)        = @loc.eqsVarMp `tyAppVarLookup2_RhsOfEqOnly` appendEqPreds @eqs.prOccL @loc.dataConProdTy2  -- cyclic occurrences subsumed by @loc.cycVarMp
      loc.occErrL                    = varmpOccurErr 
%%[[99
                                         @range
%%]]
                                         @loc.eqsVarMp @loc.cycVarMp
%%]

%%[(41 hmtyinfer) hs
-- assumption: Ty is a product
-- this function is supposed to be applied to the RHS of the unquantified type of the deconstructor function, which
-- is a product of the field types of the constructor. The equality constraints are encoded by adding them to the
-- end of this product.
appendEqPreds :: [PredOcc] -> Ty -> Ty
appendEqPreds preds ty
  = let predsTyL = map (mkTyPr . poPr) preds
        prodTyL  = tyProdArgs ty
     in appProdApp (prodTyL ++ predsTyL)
%%]

%%[(8 hmtyinfer)
ATTR AllDataConstr [ dataAltTy: Ty | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataConstr [ tyNm: HsName | | ]

SEM Decl
  | Data        constrs     .   tyNm                =   @tyNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Map for tag + arity + fld labels offsets
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
SEM DataConstr
  | Constr      loc			.	(fldMp, _, fldRefL)	=   mkFldRefAndMp @dataConGadtFldTyL
%%]
{-
  | Constr      loc			-- older
  				            .	fldRefL				=	refGen 0 1 $ zipWith (\pn (ml,_) -> maybe pn id ml) positionalFldNames @dataConGadtFldTyL
  				            .   fldMp               =   Map.fromList $ catMaybes $ zipWith (\(_,r) (ml,_) -> fmap (\l -> (l,emptyDataFldInfo {dfiOffset = r})) ml) @fldRefL @dataConGadtFldTyL
  				            -- even older
  				            .   fldMp               =   let mk o = emptyDataFldInfo {dfiOffset = o}
                                                            mkfs = fst . foldl (\(m,o) (ml,_) -> maybe (m,o+1) (\l -> ((l,mk o):m,o+1)) ml) ([],0)
                                                        in  Map.fromList $ mkfs $ @dataConGadtFldTyL
-}

%%[(7 hmtyinfer)
ATTR
  AllDataConstr
    [ | | dataConstrTagMp USE {`Map.union`} {Map.empty}: DataConstrTagMp
          dataConstrNmL USE {++} {[]}: {[HsName]}
    ]

SEM DataConstr
  | Constr      lhs         .   dataConstrTagMp     =   @conNm `Map.singleton` @dti
                            .   dataConstrNmL       =   [@conNm]
                loc         .   dti                 =   emptyDataTagInfo
                                                          { dtiFldMp        = @fldMp
                                                          , dtiFldTyL       = @dataConGadtFldTyL
                                                          , dtiConFldAnnL   = @dataConGadtFldAnnL
                                                          , dtiConNm        = @conNm
                                                          , dtiConTy        = @dataConTyAsVar
%%[[(8 codegen)
                                                          , dtiCTag         = @ctag
                                                          , dtiFldRefL      = assocLElts @fldRefL
%%]]
%%[[(8 counting)
                                                          , dtiFldAnnTyL    = @fields.caFields
%%]]
%%[[91
                                                          , dtiMbFixityPrio = @mbFixityPrio
%%]]
                                                          }
%%[[8
                            .   tag                 =   tyRecOffset @conNm @lhs.dataAltTy
                            .   arity               =   length @dataConGadtFldTyL
                            .   ctag                =   patchTyInfoCTag @lhs.tyNm @lhs.maxArity $ mkOnlyConInfoCTag @conNm @tag @arity
                                                        -- 20141016 AD: patch should not be necessary, to be sorted out,
                                                        -- codegen somewhere depends on this info prematurely (before full gathering) to be available
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Maximum arity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer)
ATTR AllDataConstr [ maxArity: Int | | gathMaxArity USE {`max`} {0}: Int ]

SEM DataConstr
  | Constr      lhs         .   gathMaxArity        =   @arity

SEM Decl
  | Data        constrs     .   maxArity            =   @constrs.gathMaxArity
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Nr of fields per label
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
SEM DataField
  | Field       loc         .   nrFieldsForLabel    =   maybe 1 length @mbLabels
                loc         .   nrFieldsForLabel    :   Int
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type+label of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataField [ | | fldTyL USE {++} {[]}: FldTyL ]

SEM DataField
  | Field       loc         .   fldTyL              =   case @mbLabels of
                                                          Just ls -> zipWith (\l t -> (Just l,t)) ls (repeat @tyExpr.ty)
                                                          _       -> [(Nothing,@tyExpr.ty)]
                loc         .   fldTyL              :   FldTyL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotation info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataField [ | | fldAnnL USE {++} {[]}: {[DataConFldAnnInfo]} ]

SEM DataField
  | Field       lhs         .   fldAnnL             =   replicate @nrFieldsForLabel
                                                          ( DataConFldAnnInfo
%%[[8
                                                              (maybe Strictness_NonStrict id @tyExpr.mbStrictness)
%%]]
                                                          )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gam for selector functions of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataField AllDataConstr [ | | fldSelGam USE {`gamUnion`} {emptyGam}: ValGam ]

SEM DataField
  | Field       loc         .   fldSelGam           =   assocLToGam [ (l,ValGamInfo $ [@lhs.dataTy] `appArr` t) | (Just l,t) <- @fldTyL ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gam for update functions of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataField AllDataConstr [ | | fldUpdGam USE {`gamUnion`} {emptyGam}: ValGam ]

SEM DataField
  | Field       loc         .   fldUpdGam           =   let mk t = [t,fr @lhs.dataTy] `appArr` @lhs.dataTy
                                                                 where fv = tyFtvMp t
                                                                       fr dt = dt
                                                        in  assocLToGam [ (hsnFldUpd l,ValGamInfo $ mk t) | (Just l,t) <- @fldTyL ]
%%]
                                                                       fr dt = tyFreshVar (`Map.member` fv) @lUniq dt

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR AllDataField [ | | kiL USE {++} {[]}: TyL ]

SEM DataField
  | Field       lhs         .   kiL                 =   replicate @nrFieldsForLabel @tyExpr.ki
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer)
ATTR AllDataConstr [ isNewtype: Bool | | ]

SEM Decl
  | Data        constrs     .   isNewtype           =   @isNewtype
%%]

%%[(8 hmtyinfer)
ATTR Expr [ | | isNewtype: Bool ]

SEM Expr
  | Con         loc         .   (dgi,_)             =   dataGamLookupErr @nm @lhs.dataGam
                            .   isNewtype           =   dgiIsNewtype @dgi
  | * - Con     lhs         .   isNewtype           =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DataFieldExpr: additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR DataFieldExpr [ | | mbConNm: {Maybe HsName} ]

SEM DataFieldExpr
  | Con         lhs         .   mbConNm             =   Just @nm
  | * - Con Upd lhs         .   mbConNm             =   Nothing
%%]

%%[(7 hmtyinfer)
ATTR DataFieldExpr [ | | mbDti: {Maybe DataTagInfo} ]

SEM DataFieldExpr
  | Con         loc         .   dti                 =   dgiDtiOfCon @nm @lhs.dgi
                lhs         .   mbDti               =   Just @dti
  | * - Con Upd lhs         .   mbDti               =   Nothing
%%]

%%[(7 hmtyinfer)
ATTR DataFieldExpr [ | | fldL: {[HsName]} ]

SEM DataFieldExpr
  | Upd         lhs         .   fldL                =   @nm : @dataFieldExpr.fldL
  | * - Upd     lhs         .   fldL                =   []

SEM Expr
  | DataFields  loc         .   fldL                =   sortBy rowLabCmp @dataFieldExpr.fldL
                            .   fldS                =   Set.fromList @fldL
%%]

%%[(7 hmtyinfer)
ATTR DataFieldExpr [ dgi: DataGamInfo | | ]

SEM Expr
  | DataFields  loc         .   dgi                 =   let dgiOf t = maybe emptyDataGamInfo id $ dataGamDgiOfTy t @lhs.dataGam
                                                        in  case (@dataFieldExpr.mbConNm,@fldL) of
                                                              (Just c,_)
                                                                -> dgiOf t
                                                                where (_,t,_) = valGamTyOfDataCon c @lhs.valGam
                                                              (_,(f:_))
                                                                -> dgiOf t
                                                                where (_,t,_) = valGamTyOfDataFld f @lhs.valGam
                                                              _ -> panic "Expr.DataFields.dgi"
                            .   dtiL                =   Map.elems $ dgiConstrTagMp @dgi
                            .   (dtiInFldL,dtiOutFldL)
                                                    =   partition (\i -> @fldS `Set.isSubsetOf` Map.keysSet (dtiFldMp i)) $ @dtiL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% GADT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Kind of LHS of the DataConstrEq should match the kind of the RHS.

%%[(41 hmtyinfer)
SEM DataConstrEq
  | Eq          loc         .   fo_                 =   fitsIn weakFIOpts defaultFIEnv @lUniq @tyExpr.kiVarMp @tyVar.ki @tyExpr.ki
                lhs         .   kiVarMp             =   foVarMp @loc.fo_ `varUpd` @tyExpr.kiVarMp
                loc         .   lUniq               :   UNIQUEREF gUniq

ATTR AllDataConstrEq [ | | prOccL USE {++} {[]} : {[PredOcc]} ]

SEM DataConstrEq
  | Eq          loc         .   pr                  =   Pred_Eq @tyVar.ty @tyExpr.ty
                loc         .   prOccId             =   mkPrIdCHR @loc.lUniq3
                loc         .   prOcc               =   rngLift @range mkPredOccRng @loc.pr @loc.prOccId @lhs.predScope
                lhs         .   prOccL              =   [@loc.prOcc]
                loc         .   lUniq3              :   UNIQUEREF gUniq
%%]

Construct a substitution from the additional equations. This subsitution is applied to the type of the constructor function to obtain
the actual type of the constructor, i.e. the additional equations do not show up in the type of a constructor. The equations are required
to be non-cyclic, and in case one equation is multiply defined, the right hand sides have to be equal modulo unification.

%%[(41 hmtyinfer)
SEM AllDataConstrEq [ | eqVarMp : {VarMp} | ]

SEM DataConstr
  | Constr      eqs.eqVarMp  = emptyVarMp
                loc.eqsVarMp = @eqs.eqVarMp

SEM DataConstrEq
  | Eq          loc         .   tv                  =   tyVar @tyVar.ty
                loc         .   knRhsTy             =   maybe Ty_Any id $ varmpTyLookup @loc.tv @lhs.eqVarMp
                loc         .   foRhsTy             =   fitsIn strongFIOpts defaultFIEnv @lUniq2 @lhs.eqVarMp @loc.knRhsTy @tyExpr.ty
                loc         .   unitVarMp           =   @loc.tv `varmpTyUnit` foTy @loc.foRhsTy
                lhs         .   eqVarMp             =   @loc.unitVarMp `varUpd` foVarMp @loc.foRhsTy `varUpd` @lhs.eqVarMp
                loc         .   lUniq               :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pattern: additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
ATTR DataFieldPatExpr [ | | dti: DataTagInfo ]

SEM DataFieldPatExpr
  | Con         loc         .   dgi                 =   let (_,t,_) = valGamTyOfDataCon @nm @lhs.valGam
                                                        in  panicJust "DataFieldPatExpr.dgi" $ dataGamDgiOfTy t @lhs.dataGam
                            .   dti                 =   dgiDtiOfCon @nm @dgi
%%]

%%[(7 hmtyinfer)
ATTR DataFieldPatExpr [ | | fldL: {[HsName]} ]

SEM DataFieldPatExpr
  | Ext         lhs         .   fldL                =   @nm : @dataFieldPatExpr.fldL
  | * - Ext     lhs         .   fldL                =   []
%%]

Check that LHS of equations is a tyvar in scope
%%[(41 hmtyinfer)
ATTR AllDataConstrEq TyVar [ | | tyvarNms USE {`Set.union`} {Set.empty} : {Set HsName} ]
SEM TyVar
  | Var  lhs.tyvarNms = Set.singleton @nm

SEM DataConstr
  | Constr
      loc.tyVarsInScope = Set.fromList (gamKeys @fields.tyGam)
      loc.undefTyVarsInEqs = @eqs.tyvarNms `Set.difference` @loc.tyVarsInScope
      loc.undefVarsErrSq = if Set.null @loc.undefTyVarsInEqs
                           then Seq.empty
                           else Seq.singleton $
                                  Err_NamesNotIntrod
%%[[99
                                    @range
%%]]
                                    "" [(pp nm, Nothing) | nm <- Set.toList @loc.undefTyVarsInEqs]

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extra gams
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(6 hmtyinfer).extraGam
SEM Decl
  | Data        loc         .   extraTyGam          =   emptyGam
                            .   extraTyKiGam        =   emptyGam
                            .   extraDataGam        =   emptyGam
%%]

%%[(92 hmtyinfer) -6.extraGam
SEM Decl
  | Data        loc         .   extraTyGam          =   emptyGam
                            .   extraTyKiGam        =   emptyGam
                            .   extraDataGam        =   emptyGam
%%]

