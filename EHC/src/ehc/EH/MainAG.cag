%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell interface to AG generated code for compiler
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}EH.MainAG} import(Data.Char,Data.List as List,UHC.Util.Pretty,{%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Base.HsName.Builtin},{%{EH}Opts}, {%{EH}Gam.Full},{%{EH}Error},{%{EH}Error.Pretty}, {%{EH}EH})
%%]

%%[(1 hmtyinfer || hmtyast).Ty hs import({%{EH}Ty})
%%]

%%[4 -1.Ty hs import({%{EH}Ty})
%%]

%%[(1 hmtyinfer || hmtyast) hs import({%{EH}Ty.Pretty})
%%]

%%[(1 hmtyinfer) hs import({%{EH}Ty.FitsInCommon},{%{EH}Ty.FitsIn})
%%]

%%[1 hs import(qualified UHC.Util.FastSeq as Seq,UHC.Util.Utils)
%%]

%%[1 hs import ({%{EH}Base.Trace})
%%]

%%[1 hs import({%{EH}Base.UnderDev})
%%]

%%[(2 hmtyinfer) hs import({%{EH}VarMp},{%{EH}Substitutable},Data.Maybe,{%{EH}Ty.Utils1})
%%]

%%[(99 hmtyinfer tyderivtree).LaTeX hs import({%{EH}Base.LaTeX})
%%]

%%[(100 hmtyinfer tyderivtree) -99.LaTeX
%%]

%%[(3 hmtyinfer) hs import({%{EH}Ty.Trf.Quantify},{%{EH}Ty.Trf.Instantiate})
%%]

%%[4444 hs import({%{EH}Base.Debug} as Debug,Debug.Trace)
%%]

%%[(4 hmtyinfer) hs import({%{EH}Ty.FitsInCommon2})
%%]
%%[(4 hmtyinfer) hs import({%{EH}Ty.FIEnv2})
%%]
%%[4 hs import(qualified Data.Set as Set,qualified Data.Map as Map, Data.Set(Set), Data.Map(Map))
%%]

%%[(7 hmtyinfer) hs import({%{EH}Ty.Trf.FreshVar},{%{EH}Ty.Ftv})
%%]

%%[8 hs import(UHC.Util.Utils(groupSortOn))
%%]

%%[8 hs import(Control.Applicative((<|>)))
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore}, {%{EH}AbstractCore.Utils})
%%]
%%[(8 codegen) hs import({%{EH}Core},{%{EH}Core.FFI},{%{EH}Core.Utils})
%%]
%%[(8 codegen coreout) hs import({%{EH}Core.Pretty})
%%]
%%[(8 codegen) hs import({%{EH}Foreign.Extract})
%%]
%%[(8 codegen) hs import({%{EH}LamInfo})
%%]
%%[(8 codegen || hmtyinfer) hs import({%{EH}CodeGen.RefGenerator})
%%]
%%[(8 codegen) hs import(qualified {%{EH}Core.SysF.AsTy} as SysF, {%{EH}FinalEnv})
%%]
%%[(8 codegen) hs import({%{EH}Core.BindExtract})
%%]
%%[(8 codegen) hs import({%{EH}Core.Subst})
%%]
%%[(8 counting) hs import(qualified {%{EH}CountingAnalysis} as CA)
%%]
%%[(8 counting) hs import(qualified {%{EH}CountingAnalysis.Substitution} as S)
%%]
%%[(8 counting) hs import(Control.Arrow (first))
%%]

%%[(90 codegen) hs import({%{EH}CodeGen.BuiltinPrims},{%{EH}Foreign})
%%]

%%[(9 hmtyinfer) hs import(Control.Monad.State)
%%]

%%[(9 codegen hmtyinfer) hs import({%{EH}Ty.Utils2})
%%]

%%[(9 codegen) hs import({%{EH}Base.Target})
%%]

%%[(9 codegen) hs import({%{EH}Core.Coercion})
%%]

%%[(9 hmtyinfer) hs import({%{EH}Ty.Trf.MergePreds},{%{EH}Ty.Trf.Canonic})
%%]

%%[(9 hmtyinfer) hs import({%{EH}Gam.ClGam},{%{EH}Pred},{%{EH}Pred.CtxtRedOnly.RedGraph}(redPruneReductionsUntil),UHC.Util.CHR,{%{EH}CHR.CtxtRedOnly.Constraint},{%{EH}CHR.CtxtRedOnly.Guard},{%{EH}Pred.CtxtRedOnly.ToCHR},{%{EH}Pred.CtxtRedOnly.Heuristics},{%{EH}Pred.CtxtRedOnly.Evidence},{%{EH}CHR.CtxtRedOnly.Solve})
%%]

%%[(9 codegen) hs import({%{EH}Pred.CtxtRedOnly.EvidenceToCore})
%%]
%%[(9 hmtyinfer) hs import ({%{EH}Gam.ClassDefaultGam})
%%]

%%[(11 hmtyinfer) hs import({%{EH}Ty.Trf.BetaReduce}(tyBetaRedFull))
%%]

%%[(41 hmtyinfer) hs import({%{EH}Ty.Trf.Subst})
%%]

%%[(50 hmtyinfer codegen) hs import({%{EH}Module.ImportExport},{%{EH}Ty.UsedNames})
%%]

%%[(50 codegen) hs import({%{EH}CodeGen.ImportUsedModules}, {%{EH}CodeGen.ModuleImportExportImpl})
%%]

%%[(40 hmtyinfer) hs import({%{EH}Ty.Trf.ElimEqual},{%{EH}Gam.Utils})
%%]

%%[90 hs import({%{EH}Foreign},{%{EH}Foreign.Pretty})
%%]

%%[(91 codegen) hs import({%{EH}Deriving})
%%]

%%[(92 hmtyinfer) hs import({%{EH}Generics})
%%]

%%[(99 hmtyinfer tyderivtree).DerivationTree hs import({%{EH}DerivationTree})
%%]

%%[(100 hmtyinfer tyderivtree) -99.DerivationTree
%%]

%%[(99 hmtyinfer) hs import({%{EH}VarMp.Utils})
%%]

%%[(99 chrtysys) hs import({%{EH}CHR.TySys.Types})
%%]

%%[(8 counting) hs import(qualified Debug.Trace as T)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import of all separate aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 ag import({EH/AbsSyn},{EH/Range})
WRAPPER AGItf
%%]

%%[(1 hmtyinfer) ag import({EH/HMTySys/InferUtils},{EH/HMTySys/Infer},{EH/HMTySys/InferExpr},{EH/HMTySys/InferTyUpDown},{EH/HMTySys/InferPatExpr},{EH/HMTySys/InferTyExpr},{EH/HMTySys/InferInit})
%%]
%%[(2 hmtyinfer) ag import({EH/FinalInfo})
%%]
%%[(4 hmtyinfer) ag import({EH/FIOpts})
%%]
%%[(4 hmtyinfer) ag import({EH/FIEnv})
%%]
%%[(6 hmtyinfer) ag import({EH/TvKiVarMp})
%%]

%%[8 ag import({EH/GatherMisc})
%%]
%%[8 ag import({EH/Trace})
%%]

%%[(1 hmtyinfer).EHRulerRules ag import(EHRulerRules)
%%]

%%[(8 noHmTyRuler hmtyinfer) -1.EHRulerRules
%%]

%%[1111.PrettyAST ag import({EH/PrettyAST})
%%]

%%[100100 -1111.PrettyAST
%%]

%%[1 ag import({EH/PrettyTrace})
%%]

%%[(99 tyderivtree).PrettyLaTeX ag import({EH/PrettyLatexDerivTree})
%%]

%%[(100 tyderivtree) -99.PrettyLaTeX
%%]

%%[1.GatherError ag import({EH/GatherError})
%%]

%%[102 -1.GatherError
%%]

%%[(1 hmtyinfer).ExtraChecks ag import({EH/ExtraChecks})
%%]

%%[(102 hmtyinfer) -1.ExtraChecks
%%]

%%[1.Pretty ag import({EH/Pretty})
%%]

%%[102 -1.Pretty
%%]

%%[(2 hmtyinfer) ag import({EH/HMTySys/InferIncrFtv})
%%]

%%[(5 hmtyinfer) ag import({EH/HMTySys/InferCaseExpr})
%%]

%%[5 ag import({EH/HMTySys/InferData})
%%]

%%[(6 hmtyinfer) ag import({EH/HMTySys/InferKiExpr})
%%]

%%[(8 codegen) ag import({EH/ToCore})
%%]
%%[(8 hmtyinfer codegen) ag import({EH/SysfTy},{EH/SysfEnv})
%%]

%%[(9 hmtyinfer) ag import({EH/ResolvePred},{EH/HMTySys/InferClass},{EH/HMTySys/InferClassCHR},{EH/ResolvePredCHR},{EH/HMTySys/InferDefault})
%%]

%%[9 ag import({EH/GatherGam})
%%]

%%[(17 hmtyinfer) ag import({EH/HMTySys/InferPolarity})
%%]

%%[(50 hmtyinfer codegen) ag import({EH/UsedNames},{EH/Orphan})
%%]

%%[(92 hmtyinfer) ag import({EH/Generics})
%%]

%%[99 ag import({EH/LocalAttrTypes})
%%]
%%[99 ag import({EH/FakeDependencies})
%%]

%%[99
PRAGMA strictsem
PRAGMA strictcase
%%]
%%[9999
PRAGMA kennedywarren
%%]
PRAGMA gencostcentres

%%[99
PRAGMA sepsemmods
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info: options, module name, name mapping, fixity (for deriving)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
ATTR AllNT AGItf [ opts: EHCOpts | | ]
%%]

%%[8
ATTR
  AGItf
%%[[50
  AllNT
%%]]
    [ moduleNm: HsName | | ]
%%]

%%[50
ATTR AGItf [ idQualGam: IdQualGam | | ]
%%]

%%[91
%%]
ATTR NTPrf AGItf [ fixityGam: FixityGam | | ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is toplevel mod?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AGItf [ isMainMod: Bool | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is a lam a top/first lam? Or: what is the context?
%%% Is let a first let in a sequence of lets?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
data ExprCtxt
  = ExprCtxt_Top | ExprCtxt_Lam | ExprCtxt_Internal
  deriving Eq
%%]

%%[1
ATTR Expr [ exprCtxt: ExprCtxt | | ]
-- ATTR Expr [ isTopLam: Bool | | ]
ATTR Expr [ isFirstLet: Bool | | ]

SEM Decl
  | Val
%%[[9
    InstanceIntro
%%]]
%%[[90
    FFE
%%]]
                expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top

SEM AGItf
  | AGItf       expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top


SEM Expr
  | Let         loc         .   isFirstLet          =   False
  | * - Let     loc         .   isFirstLet          =   True

SEM Expr
  | Lam
%%[[12
    LamImpl
%%]]
                body        -- .   isTopLam            =   False
                            .   exprCtxt            =   ExprCtxt_Lam
  | * - Lam Parens
%%[[12
    LamImpl
%%]]
                loc         -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Internal
%%]

%%[5
SEM CaseAlt
  | Pat         expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top
%%]

%%[7
SEM DataFieldExpr
  | Upd Expr    expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top

SEM RecExpr
  | Upd Expr Ext
                expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top
%%]

%%[97
SEM PatExpr
  | Expr        expr        .   isFirstLet          =   True
                            -- .   isTopLam            =   True
                            .   exprCtxt            =   ExprCtxt_Top
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% For mem retainment experiments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[102
%%]
ATTR AGItf [ | | dummy: Int ]

SEM AGItf
  | AGItf       lhs         .   dummy               =   1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, default (positional) name if absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR RecPatExpr RowTyExpr RecExpr [ | positionalFldNmL: {[HsName]} | ]
ATTR RecPatExpr [ matchOnFld: Bool | | hasAFldRef: Bool ]

SEM Expr
  | Rec         recExpr     .   positionalFldNmL    =   positionalFldNames

SEM TyExpr
  | Row         rowTyExpr   .   positionalFldNmL    =   positionalFldNames

SEM PatExpr
  | Rec         recPatExpr  .   positionalFldNmL    =   positionalFldNames
                            .   matchOnFld          =   @recPatExpr.hasAFldRef

SEM RecPatExpr
  | Ext         lhs         .   hasAFldRef          =   maybe @recPatExpr.hasAFldRef (const True) @mbNm
                (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recPatExpr.positionalFldNmL
                loc         .   nm                  =   case @mbNm of
                                                          Just nm                     -> nm
                                                          Nothing  | @lhs.matchOnFld  -> @patExpr.topNm
                                                                   | otherwise        -> @positionalNm
  | * - Ext     lhs         .   hasAFldRef          =   False
 
SEM RowTyExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @rowTyExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm

SEM RecExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm
%%]

%%[10
SEM PrExpr
  | Lacks       rowTyExpr   .   positionalFldNmL    =   positionalFldNames
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The XX_App function name of a XX, if any
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Expr.ConNm
ATTR Expr [ | | appFunNm: HsName ]

SEM Expr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - Con App
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%[4
SEM Expr
  | AppImpred   lhs     .   appFunNm    :=  @func.appFunNm
%%]

%%[7
ATTR RecExpr [ | | extNm: HsName ]

SEM RecExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext Upd
                lhs     .   extNm       =   hsnUnknown

SEM Expr
  | Rec         loc     .   appFunNm    :=  @recExpr.extNm
%%]

%%[12
SEM Expr
  | AppImpl     lhs     .   appFunNm    :=  @func.appFunNm
%%]

%%[1
ATTR TyExpr [ | | appFunNm: HsName ]

SEM TyExpr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - App Con
                lhs     .   appFunNm    =   hsnUnknown

%%]

%%[7
ATTR RowTyExpr [ | | extNm: HsName ]

SEM RowTyExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext
                lhs     .   extNm       =   hsnUnknown

SEM TyExpr
  | Row         lhs     .   appFunNm    :=  @rowTyExpr.extNm
%%]

%%[1.PatExpr
ATTR PatExpr [ | | appFunNm: HsName ]

SEM PatExpr
  | Con         loc     .   appFunNm    =   @nm
  | AppTop      loc     .   appFunNm    =   @patExpr.appFunNm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - App Con
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%[7
ATTR RecPatExpr [ | | extNm: HsName ]

SEM RecPatExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext
                lhs     .   extNm       =   hsnUnknown

SEM PatExpr
  | Rec         loc     .   appFunNm    :=  @recPatExpr.extNm
%%]

%%[6
ATTR KiExpr [ | | appFunNm: HsName ]

SEM KiExpr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - Con App
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top name of pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mbTopNm
ATTR PatExpr [ | | mbTopNm: {Maybe HsName} ]

SEM PatExpr
  | Var VarAs   loc         .   mbTopNm             =   if hsnIsWild @nm then Nothing else Just @nm
%%[[1
  | * - Var VarAs
                loc         .   mbTopNm             =   Nothing
%%][8
  | Irrefutable Bang
  				loc         .   mbTopNm             =   @patExpr.mbTopNm
  | * - Var VarAs Irrefutable Bang
                loc         .   mbTopNm             =   Nothing
%%]]
%%]

%%[7.topNm
ATTR PatExpr [ | | topNm: HsName ]

SEM PatExpr
  | Var VarAs   loc         .   topNm               =   if hsnIsWild @nm then uidHNm @lUniq else @nm
  | App         lhs         .   topNm               =   hsnUnknown
  | AppTop Con Rec CConst IConst DataFields
%%[[97
    Expr
%%]]
                loc         .   topNm               =   uidHNm @lUniq
  | SConst      loc         .   topNm               =   uidHNm @lUniq
%%[[8
  | Irrefutable Bang
  				loc         .   topNm               =   @patExpr.topNm
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique id, required for AG's UNIQUEREF mechanism
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.gUniq
ATTR AllNT [ | gUniq: UID | ]
%%]

%%[2.AGItf
SEM AGItf
  | AGItf           expr        .   gUniq                           =   uidStart
%%]

Must be chained for UNIQUEREF to work

%%[8 -2.AGItf
ATTR AGItf [ | gUniq: UID | ]
%%]

For patterns we need a unique value anyway, so declare it here globally

%%[2.PatExpr.g
SEM PatExpr
  | *           loc         .   lUniq               :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Strictness from letstrict
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllDecl [ isStrict: Bool | | ]

SEM Expr
  | Let         decls       .   isStrict    =   @isStrict
%%]



