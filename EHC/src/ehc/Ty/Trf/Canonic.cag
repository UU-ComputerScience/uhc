%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to making canonical type structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
Compute canonic form of type so e.g. syntactic equality can be used.
This is necessary for:
\begin{itemize}
\item Context reduction, i.e. Eq and Ord instances can be used on Ty to compare.
\item Foreign function interface (FFI).
\end{itemize}
In both cases the ground form of a type is required, type synonyms expanded, and in the case of newtype also the type level wrapper removed.

Canonicalization is done at
\begin{itemize}
\item rows, where fields may be in arbitrary order.
\item types where type synonym expansion may occur, because 2 comparands may be differently partially expanded.
\item (FFI only) types which are newtypes because at the value level the type level wrappers (and corresponding constructors) are erased.
\item predicates, translated to their witness equivalent, i.e. dictionaries for class predicates; others (like lack predicate for extensible records are ignored).
\end{itemize}
This is only done when types are propagated to Core.

Tricky implementation point: After type synonym expansion, the
replacement probably is structurally different and must be canonicalized
as well! Hence the Maybe return signalling a replacement requiring
recursive canonicalization of inner components, type level beta
reduction and canonicalization alternately done.

A VarMp (substitution) with additional changes in the type is threaded.
Currently (20090821) only empty implicits \verb@Impls_Tail@ are replaced by
\verb@Impls_Nil@, and removed in the type itself.
%%]

%%[(9 hmtyinfer) hs module {%{EH}Ty.Trf.Canonic} import({%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Base.HsName.Builtin},{%{EH}Ty},{%{EH}VarMp},{%{EH}Substitutable},{%{EH}Ty.FitsInCommon2})
%%]

%%[(9 hmtyinfer) hs import(Data.Maybe,qualified Data.Set as Set)
%%]

%%[(11 hmtyinfer) hs import({%{EH}Opts},{%{EH}Ty.Trf.BetaReduce})
%%]

%%[(41 hmtyinfer) hs import({%{EH}Ty.Trf.MergePreds})
%%]

%%[(90 hmtyinfer) hs import(UHC.Util.Utils)
%%]
%%[(90 hmtyinfer) hs import({%{EH}Gam.Full})
%%]
%%[(98 hmtyinfer) hs import({%{EH}Base.HsName.Builtin})
%%]
%%[(98 hmtyinfer) hs import(Control.Applicative)
%%]

-- for debug
%%[(90 hmtyinfer) hs import(UHC.Util.Debug,UHC.Util.Pretty)
%%]

%%[(9 hmtyinfer).WRAPPER ag import({Ty/AbsSyn},{Ty/CommonAG})
WRAPPER TyAGItf
%%]

%%[(99 hmtyinfer)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to making canonical type structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer) hs export(TyCanonicOut)
%%[[9
type TyCanonicOut' x = (x,VarMp)
type TyCanonicOut    = TyCanonicOut' Ty

mkCanonicOut = (,)

mkDfltTyCanonicOut :: x -> TyCanonicOut' x
mkDfltTyCanonicOut x = (x,emptyVarMp)

-- emptyTyBetaRedOut = (Ty_Any,emptyVarMp)

tbroutRes = fst
tbroutVarMp = snd
%%][11
type TyCanonicOut' x = TyBetaRedOut' x
type TyCanonicOut    = TyBetaRedOut

mkCanonicOut x y = emptyTyBetaRedOut {tbroutRes = x, tbroutVarMp = y}

mkDfltTyCanonicOut :: x -> TyCanonicOut' x
mkDfltTyCanonicOut = mkDfltTyBetaRedOut
%%]]
%%]

%%[(9 hmtyinfer) hs export(TyCanonicOpts(..),emptyTyCanonicOpts)
data TyCanonicOpts
  = TyCanonicOpts
%%[[11
      { tcoTyBetaRedFullMb  :: Ty -> Maybe TyCanonicOut
      }
%%]]

emptyTyCanonicOpts :: TyCanonicOpts
emptyTyCanonicOpts
  = TyCanonicOpts
%%[[11
      { tcoTyBetaRedFullMb  = \t -> Nothing
      }
%%]]
%%]

%%[(11 hmtyinfer) hs
tcoTyBetaRedFull :: TyCanonicOpts -> Ty -> TyCanonicOut
tcoTyBetaRedFull tco ty = maybe (mkDfltTyCanonicOut ty) id $ tcoTyBetaRedFullMb tco ty
%%]

%%[(9 hmtyinfer).tyCanonicPrime hs export(tyCanonic')
tyCanonic' :: TyCanonicOpts -> Ty -> TyCanonicOut
tyCanonic' opts ty
  =  let  t =  wrap_TyAGItf (sem_TyAGItf (TyAGItf_AGItf ty)) Inh_TyAGItf
     in   mkCanonicOut (repl_Syn_TyAGItf t) (varMp_Syn_TyAGItf t)
%%]

%%[(11 hmtyinfer) -9.tyCanonicPrime hs export(tyCanonic')
tyCanonicMb' :: TyCanonicOpts -> Ty -> Maybe TyCanonicOut
tyCanonicMb' opts ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf
                   { opts_Inh_TyAGItf = opts
                   }
                 )
     in   if isReplaced_Syn_TyAGItf t then Just (mkCanonicOut (repl_Syn_TyAGItf t) (varMp_Syn_TyAGItf t)) else Nothing

tyCanonic' :: TyCanonicOpts -> Ty -> TyCanonicOut
tyCanonic' opts ty = maybe (mkDfltTyCanonicOut ty) id $ tyCanonicMb' opts ty
%%]

%%[(9 hmtyinfer).predCanonicPrime hs export(predCanonic')
predCanonic' :: TyCanonicOpts -> Pred -> (Pred,VarMp)
predCanonic' opts pr
  = case tyCanonic' opts $ mkTyPr pr of
      (Ty_Pred pr',m) -> (pr',m)
%%]

%%[(11 hmtyinfer) -9.predCanonicPrime hs export(predCanonic')
predCanonic' :: TyCanonicOpts -> Pred -> (Pred,VarMp)
%%[[41
predCanonic' opts (Pred_Eq t1 t2)
  = ( Pred_Eq (tmpoTy $ tyMergePreds [] t1') (tmpoTy $ tyMergePreds [] t2')
    , m2 `varUpd` m1
    )
    where
      (t1',m1) = tyCanonic' opts t1
      (t2',m2) = tyCanonic' opts t2 -- (m1 `varUpd` t2)
%%]]
predCanonic' opts pr
  = case tyCanonicMb' opts $ mkTyPr pr of
      -- Just (Ty_Pred pr',m) -> (pr', m)
      Just (r@(TyBetaRedOut {tbroutRes = Ty_Pred pr'})) -> (pr', tbroutVarMp r) 
      _                    -> (pr, emptyVarMp) 
%%]

%%[(9 hmtyinfer) hs export(tyCanonic)
tyCanonic
  :: (VarLookup gm, LookupApply VarMp gm, VarLookupKey gm ~ VarId, VarLookupVal gm ~ VarMpInfo)
     => TyBetaRedEnv gm -> Ty
     -> Ty
tyCanonic fi
  = tbroutRes . tyCanonic' opts
  where opts = emptyTyCanonicOpts
%%[[11
                  {tcoTyBetaRedFullMb = tyBetaRedFullMb fi canonLkupTy (tyCanonicMb' opts)}
%%]]
%%]

%%[(9 hmtyinfer) hs export(tyCanonicFFI')
tyCanonicFFI'
  :: (VarLookup gm, LookupApply VarMp gm, VarLookupKey gm ~ VarId, VarLookupVal gm ~ VarMpInfo)
     => Bool			-- expand newtypes
     -> TyBetaRedEnv gm 
     -> Ty
     -> Ty
tyCanonicFFI' expNewtype renv
  = tbroutRes . tyCanonic' opts
  where opts = emptyTyCanonicOpts
%%[[11
                  {tcoTyBetaRedFullMb = tyBetaRedFullMb renv canonLkupTy' (tyCanonicMb' opts)}
%%]]
%%[[11
        canonLkupTy' = canonLkupTy
%%][98
        canonLkupTy' renv nm = -- tr "tyCanonicFFI" (pp nm) $ 
                             newtypeLamLkup <|> canonLkupTy renv nm
                     where newtypeLamLkup | not expNewtype = Nothing
                                          | ehcOptBuiltin ehcopts ehbnIO == nm
                                                           = Nothing
                                          | otherwise      = fmap mkDfltTyCanonicOut (dgiMbNewtype $? dataGamLookup nm $ feDataGam fe)
        fe      = fiEnv fi
        fi      = tbredFI renv
        ehcopts = feEHCOpts fe
%%]]
%%]

%%[(9 hmtyinfer) hs export(tyCanonicFFI)
tyCanonicFFI
  :: (VarLookup gm, LookupApply VarMp gm, VarLookupKey gm ~ VarId, VarLookupVal gm ~ VarMpInfo)
     => TyBetaRedEnv gm
     -> Ty
     -> Ty
tyCanonicFFI = tyCanonicFFI' False
%%]

%%[(9 hmtyinfer) hs export(predCanonic)
predCanonic
  :: (VarLookup gm, LookupApply VarMp gm, VarLookupKey gm ~ VarId, VarLookupVal gm ~ VarMpInfo)
     => TyBetaRedEnv gm -> Pred
     -> (Pred,VarMp)
predCanonic renv
  = predCanonic' opts
  where opts = emptyTyCanonicOpts
%%[[11
                  {tcoTyBetaRedFullMb = tyBetaRedFullMb renv canonLkupTy (tyCanonicMb' opts)}
%%]]
%%]

%%[(11 hmtyinfer) hs
canonLkupTy :: TyBetaRedLkup gm
canonLkupTy = betaRedTyLookup
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(11 hmtyinfer)
ATTR TyAGItf AllTy [ opts: TyCanonicOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer)
ATTR TyAGItf [ | | varMp: VarMp ]
ATTR AllTy [ | varMp: VarMp | ]

SEM TyAGItf
  | AGItf           loc     .   varMp           =   emptyVarMp
%%]

%%[(9 hmtyinfer)
SEM Impls
  | Tail            lhs     .   varMp           =   varmpImplsUnit @iv Impls_Nil `varUpd` @lhs.varMp
%%]

%%[(11 hmtyinfer)
SEM Ty
  | App             lhs     .   varMp           =   @replVarMp `varUpd` @arg.varMp
  | Con             lhs     .   varMp           =   @replVarMp `varUpd` @lhs.varMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Possible preds
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer) hs
type MbPredL = Maybe [Pred]

mbPredLCmb :: MbPredL -> MbPredL -> MbPredL
mbPredLCmb Nothing Nothing = Nothing
mbPredLCmb m1      m2      = Just $ concat $ maybeToList m1 ++ maybeToList m2
%%]

%%[(9 hmtyinfer)
ATTR Ty Impls Pred [ | | mbPredL USE {`mbPredLCmb`} {Nothing}: MbPredL ]

SEM Impls
  | Tail            lhs     .   mbPredL         =   Just []

SEM Pred
  | *               lhs     .   mbPredL         =   Just [@repl]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Has replacement been done?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(11 hmtyinfer)
ATTR TyAGItf AllTyAndFlds [ | | isReplaced USE {||} {False}: Bool ]

SEM Ty
  | App             loc     .   isReplaced      =   isJust @mbReplNoImplNil || isJust @mbRepl
  | Con Ext         loc     .   isReplaced      =   isJust @mbRepl
  | Ann             loc     .   isReplaced      =   True
--  | Lam             loc     .   isReplaced      =   isJust @mbRepl

SEM Ty
  | App             lhs     .   isReplaced      =   @isReplaced || @func.isReplaced || @arg.isReplaced
  | Ext             lhs     .   isReplaced      =   @isReplaced || @ty.isReplaced || @extTy.isReplaced
--  | Lam             lhs     .   isReplaced      =   @isReplaced || @ty.isReplaced
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicate removal replacement of implicits, the explicit ones are replaced by their witness equivalent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9999 hmtyinfer)
-- The replacement for a predicate in {! p !} -> t by its witness type w: w -> t
SEM Ty
  | App             loc     .   mbReplPred      =   if @isArrowRoot && @func.isPred
                                                    then Just (tyPred2DataTy $ head @func.appArgReplL)
                                                    else Nothing
%%]

%%[(9999 hmtyinfer)
-- If implicits, remove them, otherwise reconstruct the App
SEM Ty
  | App             loc     .   mbReplNoImplNil =   @mbReplPred
%%]

%%[(9 hmtyinfer)
-- If implicits, remove them, otherwise reconstruct the App
SEM Ty
  | App             loc     .   mbReplNoImplNil =   let r = {- tyPred2DataTy -} @arg.repl
                                                    in  case @func.mbPredL of
                                                          Nothing | @func.isPred -> Just r
                                                          Just [] | @func.isPred -> Just r
                                                          _ -- | isJust @mbReplPred -> fmap (`app1Arr` r) @mbReplPred
                                                            | otherwise          -> Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Labeled extension fields reordering replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(10 hmtyinfer)
SEM Ty
  | Ext             loc     .   mbRepl          =   if @isSpineRoot
                                                    then let (row,exts) = tyRowExtsUnAnn $ recUnRowExts @repl
                                                         in  if tyRowIsCanonOrdered exts
                                                             then Nothing
                                                             else Just $ mkDfltTyCanonicOut $ recRow row $ rowCanonOrder exts
                                                    else Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type synonym replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(11 hmtyinfer)
SEM Ty
  | App             loc     .   mbRepl          =   if @isSpineRoot
                                                    then tcoTyBetaRedFullMb @lhs.opts @replNoImplNil
                                                    else Nothing
  | Con             loc     .   mbRepl          =   tcoTyBetaRedFullMb @lhs.opts @repl
--  | Lam             loc		.	mbRepl		    =   fmap mkDfltTyBetaRedOut $ tyLamEtaRed @repl
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement, auxiliary attrs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

List of arguments of App

%%[(9 hmtyinfer)
ATTR Ty [ | | appArgReplL: {[Ty]} ]

SEM Ty
  | App             loc     .   appArgReplL     =   @arg.repl : @func.appArgReplL
  | * - App Ann     lhs     .   appArgReplL     =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer)
ATTR AllTyAndFlds [ | | repl: SELF ]
ATTR TyAGItf  [ | | repl: Ty ]
%%]

%%[(9 hmtyinfer)
SEM Ty
  | App             loc     .   replNoImplNil   =   maybe @repl id @mbReplNoImplNil
                    lhs     .   repl            =   @replNoImplNil
  | Ann             lhs     .   repl            =   @ty.repl
%%]

%%[(10 hmtyinfer)
SEM Ty
  | Ext             lhs     .   repl            =   maybe @repl tbroutRes @mbRepl
%%]

%%[(11 hmtyinfer) hs
extr :: TyCanonicOut -> (Ty,VarMp)
extr o = (tbroutRes o, tbroutVarMp o)
%%]

%%[(11 hmtyinfer)
SEM Ty
  | App             (lhs.repl,loc.replVarMp)    :=  maybe (@replNoImplNil,emptyVarMp) extr @mbRepl
  | Con             (lhs.repl,loc.replVarMp)    =   maybe (@repl,emptyVarMp) extr @mbRepl
--  | Lam             (lhs.repl,loc.replVarMp)    =   maybe (@repl,emptyVarMp) extr @mbRepl
%%]


