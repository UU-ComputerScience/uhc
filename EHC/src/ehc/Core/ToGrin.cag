%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface for toGrin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs module {%{EH}Core.ToGrin} export(Inh_CodeAGItf(..),Syn_CodeAGItf(..),wrap_CodeAGItf,sem_CodeAGItf)
%%]
%%[(8 core) hs import(Data.Char, Data.Maybe, Data.List, qualified Data.Set as Set, qualified Data.Map as Map)
%%]
%%[(8 core) hs import(UHC.Util.Utils, UHC.Util.Pretty)
%%]
%%[(8 core) hs import({%{EH}Base.Common}, {%{EH}Base.TermLike}, {%{EH}Opts}, {%{EH}Base.HsName.Builtin},{%{EH}CodeGen.BuiltinSizeInfo})
%%]
%%[(8 core) hs import({%{EH}LamInfo}, {%{EH}Core}, {%{EH}Ty}, {%{EH}Gam.Full})
%%]
%%[(8 core grin) hs import({%{EH}GrinCode})
%%]
%%[(8 core) hs import({%{EH}Core.FFI})
%%]

%%[(8 core) hs import(Debug.Trace)
%%]

%%[(8 core) hs import(Control.Monad, Control.Monad.State)
%%]

%%[(50 core) hs import({%{EH}CodeGen.ImportUsedModules})
%%]

%%[(8 core) hs import({%{EH}Foreign.Extract})
%%]

%%[(96 core) hs import({%{EH}CodeGen.BuiltinPrims})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonLevLet},{Core/CommonPred},{Core/CommonCtxtPred},{Core/CommonCtxtStrict})
WRAPPER CodeAGItf
%%]

%%[(8 core) hs
deriving instance Typeable Syn_CodeAGItf
%%]

%%[(8 core) ag import({Core/CommonBindNm},{Core/CommonFFI},{Core/CommonLamInfo},{Core/CommonGathLamInfo},{Core/Trf/CommonFv},{Core/CommonDataGam1}, {Core/CommonDataGam2})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fake AG dependencies to avoid INDUCED cycles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 core)
SEM CModule
  | Mod         expr        .   gathLamMp           <   expr.gUniq
%%]
SEM CBound
  | Bind        lhs         .   opts                <   expr.gUniq

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR AllCodeNT CodeAGItf [ opts: EHCOpts | | ]
%%]

%%[(50 core)
ATTR CModule CodeAGItf [ importUsedModules: ImportUsedModules | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DataGam required for FFI possible tags
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
%%]
ATTR AllCodeNT CodeAGItf [ dataGam: DataGam | | ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering LamInfo, providing hook for Core/CommonLamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
SEM CodeAGItf
  | AGItf       loc         .	howUnionGathLamInfo
  												=	Map.union @gathLamMp
%%]

%%[(8 core)
SEM CodeAGItf
  | AGItf       loc         .   howMergeLamInfo	=   (\(LamInfo {laminfoArity=a}) i -> i {laminfoArity=a})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR AllCodeNT [ | gUniq: UID | ]
ATTR CodeAGItf [ gUniq: UID | | ]

SEM CExpr
  | Var         loc         .   lUniq       :   UNIQUEREF gUniq
  | TupIns TupUpd TupDel
                loc         .   lUniq       :   UNIQUEREF gUniq
  | Int Char String
%%[[97
    Integer
%%]]
                loc         .   lUniq       :   UNIQUEREF gUniq
  | Case        loc         .   lUniq       :   UNIQUEREF gUniq
  | App         loc         .   lUniq       :   UNIQUEREF gUniq
                loc         .   lUniq2      :   UNIQUEREF gUniq
  | FFI         loc         .   lUniq       :   UNIQUEREF gUniq


SEM CPat
  | Con         loc         .   lUniq       :   UNIQUEREF gUniq
  | Int Char    loc         .   lUniq       :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Newly bound LamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Here we only gather arity info, stack trace info is assumed to be gathered earlier,
and assumed to propagate correctly when merged with this info.

%%[(8 core)
SEM CBound
  | Bind        lhs         .   bindLamMp
                                            =   Map.singleton @lhs.nm
                                                              (emptyLamInfo {laminfoArity = length @expr.grLamArgL})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Variables which are passed as parameter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
SEM CExpr
  | Var         loc         .   mbLam       =   case lamMpLookupLam @nm @lhs.lamMp of
                                                    j@(Just arity) | @lhs.isTopApp
                                                        -> j
                                                    _   -> Nothing
  | App         loc         .   mbLam       =   lamMpLookupLam @grAppFun @lhs.lamMp
                            .   appArity    =   length @grAppArgL
%%]

%%[(8888 core)
ATTR AllCodeNT [ | | asArgNmS USE {`Set.union`} {Set.empty}: FvS ]

SEM CExpr
  | Var         lhs         .   asArgNmS    =   maybe Set.empty (const (Set.singleton @nm)) @mbLam
  | App         lhs         .   asArgNmS    =   @func.asArgNmS
                                                    `Set.union`  maybe @arg.asArgNmS Set.singleton @arg.mbVar
                                                    `Set.union`  (case @mbLam of
                                                                    Just a | @lhs.isTopApp && @appArity < a
                                                                      -> Set.singleton @grAppFun
                                                                    _ -> Set.empty
                                                                 )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grin code, top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
ATTR CodeAGItf CModule [ | | grMod: GrModule ]

SEM CModule
  | Mod         lhs         .   grMod       =   GrModule_Mod @moduleNm
                                                             @expr.grGlobalL
                                                             @expr.grBindL
                                                             {-
                                                             (            primNmList2GrTagMap (grBuiltinTyNmL @lhs.opts)
                                                             `Map.union`  cTagsMp2GrTagMap @ctagsMp
                                                             )
                                                             -}
                                                             Map.empty
%%]

%%[(8 core)
ATTR AllExpr [ modNm: HsName | | ]

SEM CModule
  | Mod         expr . gUniq < expr . modNm
                expr . modNm = @moduleNm

%%]


%%[(8 core grin) hs

primNmList2GrTagMap :: [HsName] -> Map.Map HsName [GrTag]
primNmList2GrTagMap = Map.fromList . map (\tn -> (tn, [tr tn]))
                where tr nm = let arity = if hsnIsProd nm then hsnProdArity nm else 1
                              in  GrTag_Con (mkGrTagAnn arity arity) 0 (mkTyIsConTagInfo nm)

cTagsMp2GrTagMap :: CTagsMp -> Map.Map HsName [GrTag]
cTagsMp2GrTagMap = Map.fromList . map (\(tn,ts) -> (tn, tr ts))
             where  tr = map (\(_,(CTag _ nm i a ma)) -> GrTag_Con (mkGrTagAnn a ma) i (mkTyIsConTagInfo nm))

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grin code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin) hs
grE2V :: GrExpr -> Maybe GrVal
grE2V e = case e of {GrExpr_Unit v _ -> Just v; _ -> Nothing}

grV2HNm :: GrVal -> Maybe HsName
grV2HNm v = case v of {GrVal_Var n -> Just n; _ -> Nothing}

emptyGrExpr = GrExpr_Unit GrVal_Empty GrType_None

mbMkStrict :: HsName -> UID -> Bool -> GrVal -> GrExpr
mbMkStrict modNm u isStrict v
  = case v of
      GrVal_Node _ _ -> dflt
      _ | isStrict   -> GrExpr_Seq (GrExpr_Unit v GrType_None) (GrPatLam_Var n) (GrExpr_Eval n)
        | otherwise  -> dflt
        where n = uidQualHNm modNm u
  where dflt = GrExpr_Unit v GrType_None

retStrict :: Bool -> GrVal -> GrExpr
retStrict isStrict = if isStrict then (\v->GrExpr_Unit v GrType_None) else GrExpr_Store
%%]

%%[(8 core grin) hs
mkNdPApp :: HsName -> Int -> GrValL -> GrVal
mkNdPApp f nMiss argL = GrVal_Node (GrTag_PApp nMiss f) argL

mkNdApp :: HsName -> GrValL -> GrVal
mkNdApp f argL = GrVal_Node (GrTag_App hsnWild) (GrVal_Var f : argL)

mkSq :: GrExpr -> HsName -> GrExpr -> GrExpr
mkSq e1 p e2 = GrExpr_Seq e1 (GrPatLam_Var p) e2
%%]

%%[(8 core grin) hs
-- | Simplify GrVal by pushing the more complex ones in a GrExpr bound to a fresh variable
type SimplState  = (GrExpr->GrExpr)
type SimplStateM = StateT SimplState FreshUid

runSimpl :: UID -> SimplStateM a -> (a, GrExpr->GrExpr)
runSimpl uniq ss = evalFreshUid (runStateT ss (id)) uniq

simplAppendM :: (GrExpr->GrExpr) -> SimplStateM ()
simplAppendM f = modify (f .)

simplWrapM :: HsName -> GrExpr -> SimplStateM GrVal
simplWrapM modNm x = do
  n <- fmap (hsnUniqify HsNameUniqifier_GRINTmpVar . mkHNm) $ lift freshUID
  simplAppendM $ mkSq x n
  return $ GrVal_Var n

simplBoxM :: HsName -> GrVal -> SimplStateM (Maybe GrVal)
simplBoxM modNm v = case v of
  GrVal_Box  _ _ -> fmap Just $ simplWrapM modNm $ GrExpr_Store v
  _              -> return Nothing

simplArgM :: HsName -> LamMp -> GrVal -> SimplStateM (Maybe GrVal)
simplArgM modNm lamMp a = case a of
  GrVal_Var v | isJust mbArity
    -> fmap Just $ simplWrapM modNm (GrExpr_Store (mkNdPApp v arity []))
    where mbArity@(~(Just arity)) = lamMpLookupLam v lamMp
  GrVal_Node _ _
    -> fmap Just $ simplWrapM modNm (GrExpr_Store a)
  _ -> return Nothing

simplArgL :: HsName -> UID -> LamMp -> GrValL -> (GrValL, GrExpr->GrExpr)
simplArgL modNm uniq lamMp vL
  = runSimpl uniq $ forM vL $ \v -> firstMaybeM v [simplArgM modNm lamMp, simplBoxM modNm]

simplArg :: HsName -> UID -> LamMp -> GrVal -> (GrVal, GrExpr->GrExpr)
simplArg modNm uniq lamMp v = (v', mk)
  where ([v'], mk) = simplArgL modNm uniq lamMp [v] 
%%]

%%[(8 core grin) hs
saturateAltL :: UID -> GrExpr -> GrAltL -> GrAltL
saturateAltL uniq dflt altL
  =  case altL of
       (GrAlt_Alt _ (GrPatAlt_LitInt _) _ : _)
         | null [ a | a@(GrAlt_Alt _ (GrPatAlt_Otherwise) _) <- altL ]
           -> altL ++ [GrAlt_Alt GrAltAnnNormal (GrPatAlt_Otherwise) dflt]
       _   -> altL
%%]

%%[(10 core grin) hs
unboxArg :: EHCOpts -> DataGam -> HsName -> UID -> TagDataInfo -> GrVal -> (GrVal,GrExpr->GrExpr)
unboxArg opts dataGam modNm uniq ti v
  =  case v of
       GrVal_LitInt _
           -> (v,id)
       _   -> (GrVal_Var n,GrExpr_Seq (GrExpr_Unit v GrType_None) (mkGrUnbox opts dataGam ti n))
  where n = uidQualHNm modNm uniq

unboxArgL :: EHCOpts -> DataGam -> HsName -> UID -> TagDataInfo -> GrValL -> (GrValL,GrExpr->GrExpr)
unboxArgL opts dataGam modNm uniq ti vL
  =  let  uL = mkNewUIDL (length vL) $ uniq
     in   foldr  (\(u,a) (aL,wG)
                    ->  let (a',w) = unboxArg opts dataGam modNm u ti a
                        in  (a' : aL, w . wG)
                 )
                 ([],id)
          $ zip uL vL
%%]


%%[(8 core grin) hs

mkHole    (GrBind_Bind nm _ _ _)    rest  = GrExpr_Seq (GrExpr_Store (GrVal_Node GrTag_Hole []))
                                                       (GrPatLam_Var nm)
                                                       rest

mkVarBind (GrBind_Bind nm _ _ body) rest  = GrExpr_Seq body (GrPatLam_Var nm) rest

mkVarBindWithUpdate
          (GrBind_Bind nm _ _ body) rest  = let nm2 = hsnUniqify HsNameUniqifier_GrinUpdated nm
                                            in  GrExpr_Seq body
                                                           (GrPatLam_Var nm2)
                                                           (GrExpr_Seq (GrExpr_FetchUpdate nm2 nm)
                                                                       GrPatLam_Empty
                                                                       rest
                                                           )

mkHoles               bindL rest  = foldr mkHole              rest bindL
mkVarBindWithUpdates  bindL rest  = foldr mkVarBindWithUpdate rest bindL
mkVarBinds            bindL rest  = foldr mkVarBind           rest bindL

%%]


%%[(8 core grin) hs
%%]


%%[(8 core grin)
ATTR CExpr CBound
  [ | | grExpr: GrExpr ]
ATTR CExpr
  [ | | grBindL   USE {++} {[]}: GrBindL
        grGlobalL USE {++} {[]}: GrGlobalL
  ]
ATTR *
  [ | | baseCopy: SELF]

SEM CExpr
  | Let         (loc.grExpr,lhs.grBindL)    =   if @isGlobal
                                                then  (emptyGrExpr
                                                      ,case @categ of
                                                         CBindCateg_Rec -> traceShow "help1" $ [GrBind_Rec @binds.grBindL] ++ @body.grBindL
                                                         _              -> traceShow "help3" $              @binds.grBindL  ++ @body.grBindL
                                                      )
                                                else  (case @categ of
                                                         CBindCateg_Rec -> traceShow "Help2" $  mkHoles @binds.grBindL
                                                                            $ mkVarBindWithUpdates @binds.grBindL
                                                                            $ @body.grExpr
                                                         _              -> traceShow "help4" $  mkVarBinds @binds.grBindL @body.grExpr
                                                      ,[]
                                                      )
  | Case        loc         .   grExpr      =   let  w1 = @alts.grWrapCase
                                                     (sel,w2) = @alts.grWrapCaseSel @expr.grVal
                                                in   w1 . w2 . GrExpr_Case sel . saturateAltL @lUniq @dflt.grExpr $ @alts.grAltL
  | App         loc         .   grExpr      =   if @lhs.isTopApp
                                                then -- only saturated apps
                                                     let  argL = reverse @grAppArgL
                                                          funNm = @grAppFun
                                                          mkE  = retStrict @lhs.isStrict
                                                          n = uidQualHNm @lhs.modNm @lUniq
                                                          -- 20100824 AD: TBD taking care of yes/no building closures inside simplArgL, i.e. not for FFI
                                                          (argL',wrapGr) = simplArgL @lhs.modNm @lUniq2 @lhs.lamMp argL
                                                     in   @grAppWrap $
                                                          case @func.appFunKind of
                                                            -- tuple/constructor application
                                                            AppFunKind_Tag t
                                                              -> wrapGr (mkE v)
                                                              where v = case t of
                                                                          CTagRec          -> mkGrRecNode argL'
                                                                          CTag _ l tg a ma -> mkGrConNode (mkGrTagAnn a ma) tg (tagDataInfo t) argL'

                                                            -- ffi or function app
                                                            _ -> case @func.mbFFIApp of
                                                                   -- 20100824 AD: FFI part is work in progress
                                                                   Just ( resTy
%%[[96
                                                                        , primResNeedsEval
%%]]
%%[[90
                                                                        , callconv
%%]]
                                                                        , impEnt
                                                                        , argTyL
                                                                        )
                                                                     -> wrapGr ffi
                                                                     where ffi = ffiGrinMk @lhs.opts @lhs.dataGam @lUniq @lhs.modNm
%%[[90
                                                                                           callconv
%%]]
                                                                                           impEnt
%%[[99
                                                                                           (not primResNeedsEval)
%%]]
                                                                                           (zip argL' argTyL)
                                                                                           resTy

                                                                   -- function application
                                                                   _ -> wrapGr ap
                                                                     where ap = case @mbLam of
                                                                                   Just arity
                                                                                     | arity == @appArity && @lhs.isStrict
                                                                                         -> GrExpr_Call funNm argL'
                                                                                     | arity == @appArity
                                                                                         -> GrExpr_Store (GrVal_Node (GrTag_Fun funNm) argL')
                                                                                     | arity > @appArity
                                                                                         -> mkE (mkNdPApp funNm (arity - @appArity) argL')
                                                                                     | arity < @appArity && @lhs.isStrict
                                                                                         -> mkSq (GrExpr_Call funNm (take arity argL')) n (GrExpr_App n (drop arity argL'))
                                                                                     | otherwise
                                                                                         -> mkSq (GrExpr_Store (GrVal_Node (GrTag_Fun funNm) (take arity argL'))) n (GrExpr_Store (mkNdApp n (drop arity argL')))
                                                                                   Nothing
                                                                                     | @lhs.isStrict
                                                                                         -> mkSq (GrExpr_Eval funNm) n (GrExpr_App n argL')
                                                                                     | otherwise
                                                                                         -> GrExpr_Store (mkNdApp funNm argL')
                                                else -- dummy val
                                                     GrExpr_Unit GrVal_Empty GrType_None
  | Var         loc         .   grExpr      =   mbMkStrict @lhs.modNm @lUniq @lhs.isStrict @grVal
  | Tup         loc         .   grExpr      =   retStrict @lhs.isStrict @grVal
  | Int Char
%%[[97
    Integer
%%]]
                loc         .   grExpr      =   if ehcOptGenBoxGrin @lhs.opts
                                                then @grLitWrap $ GrExpr_Unit @grVal GrType_None
                                                else retStrict @lhs.isStrict @grVal
  | FFI         loc         .   grExpr      =   ffiGrinMk @lhs.opts @lhs.dataGam @lUniq @lhs.modNm
%%[[90
                                                          @callconv
%%]]
                                                          @impEnt
%%[[99
                                                          (not @primResNeedsEval)
%%]]
                                                          []
                                                          @resTy
  | Ann         loc         .   grExpr      =   @expr.grExpr
  | CaseAltFail loc         .   grExpr      =   @errorExpr.grExpr
%%[[9
  | HoleLet     loc         .   grExpr      =   @body.grExpr    -- when this occurs, there were no bindings for the possible (caused by implicit parameters) bindings encoded by HoleLet
%%]]
%%[[10
  | TupIns TupUpd TupDel
                loc         .   grExpr      =   if @lhs.isTopTup
                                                then  mkGrAdapt @lhs.opts @lhs.dataGam @lhs.modNm @lUniq @lhs.lamMp @lhs.isStrict (reverse @grTupFldL) (maybe hsnUnknown id (grV2HNm @grTupRec))
                                                else  GrExpr_Unit GrVal_Empty GrType_None
%%]]
  | * - Let Case App Var Tup Int Char Ann FFI CaseAltFail
%%[[9
    HoleLet
%%]]
%%[[10
    TupIns TupUpd TupDel
%%]]
%%[[97
    Integer
%%]]
                loc         .   grExpr      =   GrExpr_Unit @grVal GrType_None

SEM CBound
  | * - Val		loc			.	grExpr		= 	GrExpr_Unit GrVal_Empty GrType_None
  							-- .	grBindL		=	[]
  							-- .	grGlobalL	=	[]
%%]

%%[(10 core grin) hs
type TupAdaptFldL = [(GrVal,GrVal,GrVal->GrVal->GrAdapt)]

mkGrAdapt :: EHCOpts -> DataGam -> HsName -> UID -> LamMp -> Bool -> TupAdaptFldL -> HsName -> GrExpr
mkGrAdapt opts dataGam modNm u lamMp isStrict tupFldL tupRecNm
  =  let  [u1,u2] = mkNewUIDL 2 (uidChild u)
          (oL,vL,mkAL) = unzip3 tupFldL
          (oL',wrO) = unboxArgL opts dataGam modNm u1 tagInfoInt oL
          (vL',wrV) = simplArgL modNm u2 lamMp vL
     in   wrV . wrO . retStrict isStrict
          . GrVal_NodeAdapt tupRecNm
          . zipWith3 ($) mkAL oL' $ vL'
%%]

%%[(8 core grin) hs
mkGrBoxed :: UID -> Bool -> EHCOpts -> HsName -> DataGam -> LamMp -> TagDataInfo -> GrVal -> (GrVal, GrExpr -> GrExpr)
mkGrBoxed uniq doBox opts modNm dataGam lamMp ti v = runSimpl uniq $ firstMaybeM v1 [simplBoxM modNm]
  where v1 = (if doBox then mkGrBox opts dataGam ti else id) v
%%]

%%[(8 core grin)
ATTR CExpr CBound  [ | | grVal: GrVal ]

SEM CExpr
  | Int
%%[[97
    Integer
%%]]
				loc			.	tagInfo		= 	tagInfoInt
  | Char		loc			.	tagInfo		= 	tagInfoChar
  | String		loc			.	tagInfo		= 	mkTyIsConTagInfo $ ehcOptBuiltin @lhs.opts ehbnPackedString

SEM CExpr
  | Int			loc			.	grValLit	= 	GrVal_LitInt @int
  | Char		loc			.	grValLit	= 	GrVal_LitInt (ord @char)
  | String		loc			.	grValLit	= 	GrVal_LitStr @str
%%[[97
  | Integer		loc			.	grValLit	= 	GrVal_LitInt $ fromInteger @integer
%%]]

SEM CExpr
  | Tup         loc         .   grVal       =   ctag (mkGrRecNode []) (\_ l tg a ma -> mkGrConNode (mkGrTagAnn a ma) tg (tagDataInfo @tag) []) @tag
  | Var         loc         .   grVal       =   maybe (GrVal_Var @nmAsp) (\a -> mkNdPApp @nmAsp a []) @mbLam
  | Int Char String
%%[[97
    Integer
%%]]
  				loc         .   (grVal,grLitWrap)
  											=   mkGrBoxed @lUniq @lhs.doBox @lhs.opts @lhs.modNm @lhs.dataGam @lhs.lamMp @tagInfo @grValLit
  | Ann         loc         .   grVal       =   @expr.grVal
  | * - Int Char String Var Tup Ann
%%[[97
    Integer
%%]]
                loc         .   grVal       =   GrVal_Empty

SEM CBound
  | * - Val		loc			.	grVal       =   GrVal_Empty
%%]

%%[(8 core grin)
ATTR CExpr CBound [ | | grValWrap: {GrExpr -> GrExpr} ]

SEM CExpr
  | Int Char String
%%[[97
    Integer
%%]]
  				lhs         .   grValWrap   =   @grLitWrap
  | * - Ann Int Char String
%%[[97
    Integer
%%]]
  				lhs         .   grValWrap   =   id

SEM CBound
  | * - Val		loc			.	grValWrap 	=   id
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Do boxing?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
ATTR AllExprOnly CBound [ doBox: Bool | | ]

SEM CExpr
  | TupUpd TupIns TupDel
                offset      .   doBox       =   False
                loc         .   doBox       =   True
  | * - TupUpd TupIns TupDel Ann
                loc         .   doBox       =   True

SEM CModule
  | Mod         expr        .   doBox       =   True

SEM CBoundL
  | Cons        hd          .   doBox       =   True

SEM CBound
  | Bind Val
%%[[90
    FFE
%%]]
                expr        .   doBox       =   True

SEM CPatFld
  | Fld         offset      .   doBox       =   True

SEM CAlt
  | Alt         expr        .   doBox       =   True
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Normal bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
SEM CBound
  | Bind        loc         .   aspectKeyS  =   acbaspkeyNone
%%]

%%[(8 core grin)
SEM CBound
  | Bind Val    loc         .   nmAsp       =   hsnUniqifyACoreBindAspectKeyS @aspectKeyS @lhs.nm
%%]

%%[(8 core grin)
ATTR AllBind [ | | grBindL   USE {++} {[]}: GrBindL
                   grGlobalL USE {++} {[]}: GrGlobalL
             ]

SEM CBound
  | Bind Val    (lhs.grBindL, lhs.grGlobalL)=   ( [GrBind_Bind @nmAsp GrBindAnnNormal @expr.grLamArgL @expr.grLamBody]
                                                , []
                                                )

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FFI binding: plain stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(90 core grin)
SEM CBound
  | FFE         lhs         .   grBindL     =   []  -- not implemented yet
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case, pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin) hs
idGrWrapCaseSel :: GrVal -> (GrVal,GrExpr->GrExpr)
idGrWrapCaseSel s = (s,id)
%%]

%%[(8 core grin)
ATTR CAlt    [ | | grAlt: GrAlt ]
ATTR CAltL   [ | | grAltL: GrAltL ]

SEM CAlt
  | Alt         lhs         .   grAlt       =   GrAlt_Alt GrAltAnnNormal @pat.grPat @expr.grExpr

SEM CAltL
  | Cons        lhs         .   grAltL      =   @hd.grAlt : @tl.grAltL
  | Nil         lhs         .   grAltL      =   []
%%]

%%[(8 core grin)
ATTR CPat    [ | | grPat: GrPatAlt ]
-- ATTR CPatL   [ | | grPatL: GrPatL ]    -- obsolete? (JF)

SEM CPat
  | Var         lhs         .   grPat       =   GrPatAlt_Otherwise   -- @patNm
  | Int         lhs         .   grPat       =   GrPatAlt_LitInt @int
  | Char        lhs         .   grPat       =   GrPatAlt_LitInt (ord @char)
  | Con         lhs         .   (grPat,grWrapCase)
                                            =   case @rest.self of
                                                   CPatRest_Empty
                                                     ->  (ctag mkGrPatRecNode (\_ l t a ma -> mkGrPatConNode (mkGrTagAnn a ma) t (tagDataInfo @tag)) @tag @binds.nmL,id)
%%[[10
                                                   CPatRest_Var r
                                                     ->  let  (oL,mkSL) = unzip @binds.grTupFldL
                                                              (oL',wrO) = unboxArgL @lhs.opts @lhs.dataGam @lhs.modNm @lUniq tagInfoInt oL
                                                         in   (ctag mkGrPatRecSplit (\_ l t a ma -> mkGrPatConSplit (mkGrTagAnn a ma) t (tagDataInfo @tag)) @tag r . zipWith ($) mkSL $ oL',wrO)
%%]]

%%]

%%[(97 core grin)
SEM CPat
  | BoolExpr    lhs         .   grPat       =   GrPatAlt_Otherwise -- transformed into explicit if-then-else
                                                                   -- TODO: this is unfinished work, matching on literals does not work yet
%%]

%%[(10 core grin)
ATTR AllPatFld [ | | grTupFldL USE {++} {[]}: {[(GrVal,GrVal->GrSplit)]} ]

SEM CPatFld
  | Fld         lhs         .   grTupFldL   =   [(@offset.grVal,\o -> GrSplit_Sel @fldNm o)]
%%]

%%[(8 core grin)
ATTR AllPat AllAlt [ | | grWrapCase USE {`const`} {id}: {GrExpr -> GrExpr} ]
ATTR AllPat AllAlt [ | | grWrapCaseSel USE {`const`} {idGrWrapCaseSel}: {GrVal -> (GrVal,GrExpr->GrExpr)} ]

SEM CPat
  | Int Char    lhs         .   grWrapCaseSel
                                            =   let n = uidQualHNm @lhs.modNm @lUniq
                                                in  \v -> (GrVal_Var n,GrExpr_Seq (GrExpr_Unit v GrType_None) (mkGrUnbox @lhs.opts @lhs.dataGam tagInfoInt n))
%%]

%%[(8 core grin)
ATTR CPatRest [ | | self: SELF ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Record fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin) hs
%%]

%%[(8 core grin)
ATTR CExpr [ | | grTupRec: GrVal]

%%[[10
ATTR CExpr [ | | grTupFldL: TupAdaptFldL ]
%%]]

SEM CExpr
%%[[10
  | TupIns TupUpd TupDel
                loc         .   grTupRec    =   @expr.grTupRec
  | TupIns      loc         .   grTupFldL   =   (@offset.grVal,@fldExpr.grVal,\o v -> GrAdapt_Ins o v) : @expr.grTupFldL
  | TupUpd      loc         .   grTupFldL   =   (@offset.grVal,@fldExpr.grVal,\o v -> GrAdapt_Upd o v) : @expr.grTupFldL
  | TupDel      loc         .   grTupFldL   =   (@offset.grVal,GrVal_Empty   ,\o _ -> GrAdapt_Del o  ) : @expr.grTupFldL
%%]
  | *
%%[[10
       - TupIns TupUpd TupDel Ann
                loc         .   grTupFldL   =   []
%%]]
                loc         .   grTupRec    =   @grVal
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let body
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
ATTR CExpr [ | | grLetBody: GrExpr ]

SEM CExpr
  | Let         lhs         .   grLetBody   = traceShow ("ds", @binds.grBindL, "***", @binds.baseCopy) $   @body.grLetBody
  | * - Let Ann CaseAltFail
                lhs         .   grLetBody   =   @grExpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lam arg/body info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core)
ATTR CExpr [ | | grLamArgL: {[HsName]}  ]

SEM CExpr
  | Lam         lhs         .   grLamArgL   =   @argNm : @body.grLamArgL
  | * - Lam Ann CaseAltFail
                lhs         .   grLamArgL   =   []

%%]

%%[(8 core grin)
ATTR CExpr [ | | grLamBody: GrExpr  ]

SEM CExpr
  | * - Lam Ann CaseAltFail
                lhs         .   grLamBody   =   @grExpr

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% App func/args info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core grin)
ATTR CExpr [ | | grAppFun: HsName  grAppArgL: GrValL  ]

SEM CExpr
  | App         loc         .   grAppFun    =   @func.grAppFun
                            .   grAppArgL   =   @arg.grVal : @func.grAppArgL
  | * - App Ann lhs         .   grAppFun    =   maybe hsnUnknown id . grV2HNm $ @grVal
                            .   grAppArgL   =   []
%%]

%%[(8 core grin)
ATTR CExpr [ | | grAppWrap: {GrExpr -> GrExpr} ]

SEM CExpr
  | App         loc         .   grAppWrap   =   @func.grAppWrap . @arg.grValWrap
  | * - App Ann
  				lhs         .   grAppWrap   =   id
%%]
