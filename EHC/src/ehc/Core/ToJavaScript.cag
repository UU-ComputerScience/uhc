%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation for Javascript
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs module {%{EH}Core.ToJavaScript} import({%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Opts},{%{EH}Ty},{%{EH}Core})
%%]

%%[(8 javascript) hs import(Data.Maybe, qualified Data.Map as Map, qualified Data.Set as Set, Data.Char, Data.Maybe, Data.List)
%%]
%%[(8 javascript) hs import(EH.Util.Utils, qualified EH.Util.FastSeq as Seq)
%%]

%%[(8 javascript) hs import({%{EH}Base.Builtin},{%{EH}Base.Builtin2},{%{EH}BuiltinPrims},{%{EH}Base.BasicAnnot},{%{EH}Base.GenJavaLike})
%%]

%%[(8 javascript) hs import({%{EH}Gam.DataGam})
%%]

%%[(8 javascript) hs import(qualified {%{EH}JavaScript} as J)
%%]

%%[(8 javascript) hs import({%{EH}Foreign.Extract})
%%]

-- debug
%%[(8 javascript) hs import({%{EH}Base.Debug},EH.Util.Pretty)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Interface
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonBindNm},{Core/CommonJavaLike},{Core/CommonPred},{Core/CommonCtxtPred},{Core/CommonFFI})
WRAPPER CodeAGItf
%%]

%%[(8 javascript) hs export(cmod2JavaScriptModule)
cmod2JavaScriptModule :: EHCOpts -> DataGam -> CModule -> J.JavaScriptModule
cmod2JavaScriptModule opts dataGam cmod
  =  js_Syn_CodeAGItf t
  where t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                                          (Inh_CodeAGItf { opts_Inh_CodeAGItf = opts
                                                         , dataGam_Inh_CodeAGItf = dataGam
                                                         })
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR CodeAGItf AllNT [ opts: EHCOpts | | ]
%%]

%%[(8 javascript)
ATTR CodeAGItf AllNT [ dataGam: DataGam | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR AllNT [ | gUniq: UID | ]

SEM CodeAGItf
  | AGItf       loc         .   gUniq           =   uidStart
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
nmFunSuff :: Int -> String
nmFunSuff n | n >  5    = "N"
            | n >= 0    = show n
            | otherwise = ""
-- nmApplyN n  = "_a" ++ nmFunSuff n ++ "_"
nmEvalN  n  = "_e" ++ nmFunSuff n ++ "_"
nmEval      = nmEvalN (-1)
nmFunN   n  = mkHNm ("_F" {- ++ nmFunSuff n -} ++ "_")
nmAppN   n  = "_A" {- ++ nmFunSuff n -} ++ "_"
nmTag       = mkHNm "_tag_"
nmInd       = mkHNm "_i_"
nmIndSet    = mkHNm "_i_set_"
nmSwitchRes = mkHNm "_sw"
%%]

%%[(8 javascript) hs
hsnJavaScriptVar :: Bool -> HsName -> HsName -> HsName -> HsName
%%[[8
hsnJavaScriptVar isGlobal = hsnJavaLikeVar (id, id, id)
%%][50
hsnJavaScriptVar isGlobal = hsnJavaLikeVar (hsn, hsnPrefix "$", ('$':))
  where hsn | isGlobal  = id
            | otherwise = hsnQualified
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Safe name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
SEM CBound
  | *           loc         .   varnm           =   hsnJavaScriptVar @lhs.isGlobal @lhs.pkgNm @lhs.topClassNm @lhs.nm
                loc         .   varnm           :   HsName

SEM CExpr
  | Var         loc         .   varnm           =   hsnJavaScriptVar True @lhs.pkgNm @lhs.topClassNm @nm

SEM CPatFld
  | Fld         loc         .   varnm           =   hsnJavaScriptVar False @lhs.pkgNm @lhs.topClassNm @fldNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extract all module names of globally introduced identifers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 javascript)
ATTR CExpr AllBind [ | | usedModNmS USE {`Set.union`} {Set.empty} : {FvS} ]

SEM CBound
  | *           lhs         .   usedModNmS      =   maybe Set.empty Set.singleton $ hsnQualifier @varnm

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Variable bindings for other than global
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
type CVarInfo = CVarInfo' () HsName Int
type CVarMp   = CVarMp'   () HsName Int
%%]

%%[(8 javascript) hs
tyDefault = ()
%%]

%%[(8 javascript) hs
jvRef :: CVarMp -> CVarInfo -> J.Expr
jvRef
  = cvarToRef
      ( \_       -> J.Expr_This
      , \_ o     -> jsVar o
      , \_ _ f   -> jsVar f
      , \_ e _ f -> J.Expr_ObjFld e (mkHNm f)
      , \  e o   -> J.Expr_ArrInx e o
      , jsIntConst
      )
%%]

%%[(8 javascript)
SEM CExpr
  | Let         loc         .   nmToRefAssocL   =   map (\x -> (x, hsnJavaScriptVar @isGlobal @lhs.pkgNm @lhs.topClassNm x)) @binds.bindNmL
%%]

%%[(8 javascript)
SEM CExpr
  | Lam         loc         .   (jsArgTyL,_,lamBindings)
                                                =   if @hasFunHere
                                                    then jsArgsUnpack (map (hsnJavaScriptVar False @lhs.pkgNm @lhs.topClassNm)) @nmArgL
                                                    else ([],[],[])
%%]

%%[(90 javascript)
SEM CBound
  | FFE         loc         .   jsArgL          =   maybe [] (map (hsnJavaScriptVar False @lhs.pkgNm @lhs.topClassNm)) @expr.mbLam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case: scrutinee
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
%%]
-- dummy
SEM CExpr
  | Case        loc         .   scrutineeCVarInfo =   CVarInfo_None

%%[(8 javascript)
SEM CExpr
  | Case        loc         .   (scrutineeTagJS,scrutineeCVarInfo)
                                                =   case @alts.scrutinees of
                                                      (Scrutinee_Var nm : _)
                                                        -> panic ("Core.ToJavaScript.CExpr.Case.Scrutinee_Var: " ++ show nm ++ " : not yet implemented")
                                                      (Scrutinee_Int _ : _)
                                                        -> ( @expr.js
                                                           , CVarInfo_None
                                                           )
                                                      (Scrutinee_Tag tag : _)
                                                        -> ( gettag
                                                           , CVarInfo_Local () $ panicJust "ToJavaScript.CExpr.Case scrutinee" $ J.exprMbVar @expr.js
                                                           )
                                                        where (gettag)
                                                                 = case tag of
                                                                     CTagRec         -> ( J.Expr_Str "*** ERR GETTAG ***" )
                                                                     CTag _ _ _ _ _  -> ( J.Expr_Sel @expr.js (jsVar nmTag)
                                                                                        )
                                                      (Scrutinee_Other x : _)
                                                        -> panic ("Core.ToJavaScript.CExpr.Case.Scrutinee_Other: " ++ x ++ " : not yet implemented")
                                                      []
                                                        -> panic ("Core.ToJavaScript.CExpr.Case.-")
%%]

%%[(8 javascript)
SEM CAlt
  | Alt         loc         .   (scrutineeTag)
                                                =   case @pat.scrutinees of
                                                      (Scrutinee_Tag (CTag _ cn tag _ _) : _)
                                                        -> ( tag
                                                           )
                                                      (Scrutinee_Int i : _)
                                                        -> ( i
                                                           )
                                                      _ -> (0)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case alt: names of fields, used to access fields in object representing data constructor
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR AllPatFld [ | dataFldNmL: {[HsName]} | ]

SEM CPat
  | Con         binds       .   dataFldNmL      =   jsDataFldNames @lhs.dataGam @tag

SEM CPatFld
  | Fld         (loc.objFldNm,lhs.dataFldNmL)   =   hdAndTl' (panic "ToJavaScript.CPatFld.Fld.dataFldNmL") @lhs.dataFldNmL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case: offsets of offsets in tuple
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR AllPat [ | | offsetBinds USE {++} {[]} : {[(HsName,CVarInfo,J.Expr)]} ]
%%]

%%[(8 javascript)
%%]
-- dummy
SEM CPatFld
  | Fld         loc.cviField = CVarInfo_None

%%[(8 javascript)
SEM CPatFld
  | Fld         (loc.cviField,loc.offsetBinds)
                                                =   case @lhs.ctag of
                                                      CTagRec
                                                        -> case @offset.whatBelow of
                                                             ExprIsInt i -> (mkf $ Left  i,[])
                                                             ExprIsVar n -> (mkf $ Right n,[])
                                                             {-
                                                             _           -> (mkf $ Right n,[(n,CVarInfo_Local t o,mkj @offset.js)])
                                                                         where n = @varnm
                                                                               o = @lhs.offsetOffset
                                                                               (mkj,t) = (id,())
                                                             -}
                                                        where mkf o = CVarInfo_TupFld tyDefault @lhs.scrutineeCVarInfo o
                                                      CTag _ cn _ _ _
                                                        -> case @offset.whatBelow of
                                                             ExprIsInt i -> (CVarInfo_DataFld tyDefault @lhs.scrutineeCVarInfo hsnUnknown (show @objFldNm),[])
                                                             _           -> panic "Core.ToJavaScript.CPatFld.Fld.cviField"
                                                        -- where cn' = hsnJavaLikeDataCon @lhs.pkgNm @lhs.topClassNm cn
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: App as args ++ func
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR CExpr [ | | jsArgFunL: {[J.Expr]} ]

SEM CExpr
  | App         loc         .   jsArgFunL   =   @argUnpackWrap @arg.js : @func.jsArgFunL
  | * - App Ann lhs         .   jsArgFunL   =   [@js]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: Lam as body + args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR CExpr [ | | jsLamBody: {J.Expr} ]

SEM CExpr
  | Lam         loc         .   jsLamBody   =   @body.jsLamBody
  | * - Lam Ann lhs         .   jsLamBody   =   @js
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs export(jsModDeps)
-- | tracing
jsTr :: PP x => String -> x -> Seq.Seq J.Stat
jsTr m x = Seq.singleton $ J.Stat_Expr $ J.Expr_Call (jsVar $ mkHNm "trace") [J.Expr_Str m, J.Expr_Inline $ showPP $ pp x]

-- constant
jsIntConst :: Integral x => x -> J.Expr
jsIntConst i = J.Expr_Int $ fromIntegral i

-- var
jsVar :: HSNM x => x -> J.Expr
jsVar nm = J.Expr_Var $ mkHNm nm

-- call
jsCall :: HSNM n => n -> [J.Expr] -> J.Expr
jsCall f as = J.Expr_Call (jsVar $ mkHNm f) as

-- apply
jsApp :: J.Expr -> [J.Expr] -> J.Expr
jsApp f as
  = J.Expr_New $ jsCall nm (f : as')
  where (nm,_,as') = jsArgsPack as
        nArgs      = length as'

-- lam
jsFun :: HsName -> [HsName] -> [J.Stat] -> J.Expr
jsFun fNm as stats
  = J.Expr_New $ jsCall (nmFunN $ length as) (extra ++ [J.Expr_Fun Nothing as stat])
  where stat = J.Stat_Block stats
%%[[8
        extra = [J.Expr_Str $ show fNm]
%%][100
        extra = []
%%]]

-- force evaluation
jsEvl :: J.Expr -> J.Expr
jsEvl x = jsCall nmEval [x]

-- assign
jsAssign :: HSNM x => x -> J.Expr -> J.Stat
jsAssign n e = J.Stat_Assign (jsVar $ mkHNm n) e

-- new tuple
jsNewTup :: [J.Expr] -> J.Expr
jsNewTup = J.Expr_Arr

-- | field names used for data constructors, either as provided by program, or made up here
--   20101012 AD, note: internally generated datatypes not yet have correct meta info, so fill up names as needed, as temporary hack
jsDataFldNames :: DataGam -> CTag -> [HsName]
jsDataFldNames dataGam ctag
  = zipWith (\o mbn -> maybe o (hsnSafeJavaLike . hsnQualified) mbn) hsnLclSupply $ nms ++ fill
  where nms  = maybe [] (\(_,dti) -> map fst $ dtiFldTyL dti) $ dataGamTagLookup ctag dataGam
        fill = repeat Nothing

-- either new data constructor or tuple
jsNewTupOrData :: DataGam -> HsName -> HsName -> CTag -> [J.Expr] -> J.Expr
jsNewTupOrData dataGam _ _ ctag as
  = case ctag of
      CTag _ _ t _ _ -> J.Expr_Obj $ ((nmTag,jsIntConst t):)
                                    $ zip (jsDataFldNames dataGam ctag) as
      CTagRec        -> jsNewTup as

-- | body
jsBody :: (J.Expr -> J.Stat) -> Seq.Seq JBind -> Seq.Seq J.Stat -> Maybe J.Expr -> [J.Stat]
jsBody mkRet binds stats lastExpr
  = Seq.toList $
                Seq.map (\(JBind _ n _ e _) -> J.jsVarDecl n e) binds
    `Seq.union` stats
    `Seq.union` Seq.fromList (map mkRet $ maybeToList lastExpr)

jsModDeps (J.JavaScriptModule_Mod _ d _) = d
%%]

%%[(8 javascript)
ATTR CExpr CBound [ | | js: {J.Expr} ]
ATTR CExpr AllBind [ | | dps USE {`Set.union`} {Set.empty} : {Set.Set String} ]
%%]

%%[(8 javascript)
SEM CExpr
  | Var         loc         .   js              =   jvRef @lhs.cvarMp @cvi
  | Int         loc         .   js              =   jsIntConst  @int
  | Char        loc         .   js              =   jsIntConst (ord @char) -- J.Expr_Char @char
  | String      loc         .   js              =   J.Expr_Str  @str
  | Tup         loc         .   js              =   jsNewTupOrData @lhs.dataGam @lhs.pkgNm @lhs.topClassNm @tag []
  | App         loc         .   js              =   if @isTopApp'
                                                    then let (f:as) = reverse @jsArgFunL
                                                         in  case @func.appFunKind of
                                                               AppFunKind_Tag tag -> jsNewTupOrData @lhs.dataGam @lhs.pkgNm @lhs.topClassNm tag as
                                                               AppFunKind_FFI     -> @func.resPackWrap $ @func.mkFFI {-f-} as
                                                               _                  -> jsApp f as
                                                    else J.Expr_Str "*** ERR APP ***"
  | FFI         loc         .   (mkArgsJS,mkResJS,mkFFI)
                                                =   ffiJavaScriptMkCall
                                                        @ty
                                                        @foreignEntInfo
                                                        @lhs.opts False @argMbConL @resMbCon
                            .   js              =   if null @argMbConL
                                                    then (@mkResJS $ @mkFFI [])
                                                    else (jsVar $ mkHNm $ forextractEnt @foreignEntInfo)
                            .   dps             =   case @foreignEntInfo of
                                                      ForeignExtraction_Plain {} -> Set.fromList $ forextractIncludes @foreignEntInfo
                                                      _                          -> Set.empty

  | Let         loc         .   (jbindsLet,jstatsLet)
                                                =   if @isGlobal
                                                    then ( @binds.jbinds, Seq.empty )
                                                    else let binds = [ ((offof n),t,e) | JBind n _ t e _ <- Seq.toList @binds.jbinds ]
                                                             offof n = cvarOffset $ panicJust "ToJavaScript.CExpr.Let.js offset" $ Map.lookup n @cvarMpNew
                                                             initbinds
                                                                   = case @categ of
                                                                       CBindCateg_Rec
                                                                         ->             Seq.fromList [ J.Stat_VarDecl o $ Just $ jsCall nmInd [] | (o,_,_) <- binds ]
                                                                            `Seq.union` Seq.fromList [ J.Stat_Expr $ jsCall nmIndSet [jsVar o, e] | (o,_,e) <- binds ]
                                                                       _ -> Seq.fromList [ J.Stat_VarDecl o (Just e) | (o,_,e) <- binds ]
                                                         in  ( Seq.empty, initbinds )
                            .   js              =   @body.js
  | Case        loc         .   (jstatsCase,js)
                                                =   let alts = case @alts.altsJsL of
                                                                 [(_,stats,e)]
                                                                    -> (stats,e)
                                                                 as -> ( Seq.fromList $
                                                                           [ J.Stat_VarDecl swRes Nothing
                                                                           , J.Stat_Switch @scrutineeTagJS
                                                                               [ J.Alt_Alt tag $ Seq.toList $ stats `Seq.union` Seq.fromList [jsAssign swRes e, J.Stat_Break]
                                                                               | (tag,stats,e) <- as
                                                                               ]
                                                                           ]
                                                                       , jsVar swRes
                                                                       )
                                                                    where swRes   = hsnJavaScriptVar False @lhs.pkgNm @lhs.topClassNm $ hsnUniqifyUID HsNameUniqifier_JSSwitchResult @lUniq nmSwitchRes
                                                    in  alts
                loc         .   lUniq           :   UNIQUEREF gUniq
  | CaseAltFail loc         .   js              =   @errorExpr.js
  | Ann         loc         .   js              =   @expr.js
  | * - Var Int Char String App Tup Let CaseAltFail Lam FFI Case Ann
                loc         .   js              =   J.Expr_Str "*** TODO: CExpr | loc.js ***"

SEM CBound
  | * - Val	FFE Bind
    			loc			.	js				=	J.Expr_Str "*** ERR CBound ***"
%%]

%%[(8 javascript)
ATTR AllAlt [ | | altsJsL USE {++} {[]} : {[(Int,Seq.Seq J.Stat,J.Expr)]} ]
%%]

%%[(8 javascript)
SEM CAlt
  | Alt         loc         .   altsJsL         =   [(@scrutineeTag,@expr.jstats,@expr.js)]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional unwrapping of arguments resp packing of res, in particular for FFI call
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR CExpr [ | | argUnpackWrapL : {[J.Expr -> J.Expr]} ]

SEM CExpr
  | FFI         lhs         .   argUnpackWrapL  =   @mkArgsJS
                
  | App         (loc.argUnpackWrap,loc.argUnpackWrapL)
                                                =   hdAndTl' id @func.argUnpackWrapL
                lhs         .   argUnpackWrapL  =   if @isTopApp' then [] else @argUnpackWrapL
  | * - FFI App Ann
                lhs         .   argUnpackWrapL  =   []
%%]

%%[(8 javascript)
ATTR CExpr [ | | resPackWrap : {J.Expr -> J.Expr} ]

SEM CExpr
  | FFI         lhs         .   resPackWrap     =   @mkResJS
                
  | App         lhs         .   resPackWrap     =   if @isTopApp' then id else @func.resPackWrap
  | * - FFI App Ann
                lhs         .   resPackWrap     =   id
%%]

%%[(8 javascript)
-- | Construction of the actual call given parameters. Already provided with the FFI function. The use of 'head' is arbitrary, because unused.
ATTR CExpr [ | | mkFFI : {[J.Expr] -> J.Expr} ]

SEM CExpr
  | App         lhs         .   mkFFI           =   if @isTopApp' then head else @func.mkFFI
  | * - FFI App Ann
                lhs         .   mkFFI           =   head
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Dealing with >5 args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
-- pack > 5 args into tuple, otherwise normal
jsArgsPack :: [J.Expr] -> (String,(),[J.Expr])
jsArgsPack = javalikeArgsPack (-1) ((),(),J.Expr_Arr,nmAppN)
%%]

%%[(8 javascript) hs
-- unpack > 5 args from tuple, otherwise normal
jsArgsUnpack :: ([HsName]->[HsName]) -> [HsName] -> ([(HsName,())],[(J.Expr,())],[(HsName,CVarInfo)])
jsArgsUnpack toRef = javalikeArgsUnpack maxBound ((), (), (), toRef, jsIntConst, \_ a -> a, \n -> take n hsnLclSupply)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: single binding
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript) hs
type JBind  = JBind'  () J.Expr ()
type JBinds = JBinds' () J.Expr ()
%%]

%%[(8 javascript) hs
jBind :: HsName -> HsName -> J.Expr -> JBinds
jBind = jBind' (tyDefault, id, const ())
%%]

%%[(8 javascript)
SEM CBound
  | Bind        lhs         .   jbinds          =   jBind @lhs.nm @varnm @js
%%[[90
  | FFE         lhs         .   jbinds          =   let n = mkHNm @expEntNm
                                                    in  jBind n n @js
%%]]
%%]

%%[(8 javascript)
ATTR CExpr [ | | jstats: {Seq.Seq J.Stat} ]

SEM CExpr
  | Let         lhs         .   jstats          =   @jstatsLet `Seq.union` @body.jstats
  | Case        lhs         .   jstats          =   @jstatsCase
  | Lam         lhs         .   jstats          =   if @hasFunHere then Seq.empty else @body.jstats
  | * - Let Case Lam Ann
                lhs         .   jstats          =   Seq.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: methods
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
SEM CModule
  | Mod         loc         .   jmodStats       =   jsBody J.Stat_Expr @expr.jbinds @expr.jstats Nothing
                            .   jmodStatsMain   =   [ J.Stat_Expr $ jsEvl $
%%[[99
                                                      (\m -> jsApp m [J.Expr_Arr []]) $
%%]]
                                                      @expr.js
                                                    ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: classes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
SEM CExpr
  | Lam         loc         .   js              =   if @hasFunHere
                                                    then let as = [o | (o,_) <- @jsArgTyL]
                                                             v = mkHNm "_"
                                                             t1 x = if ehcOptGenTrace @lhs.opts
                                                                    then Seq.unions [ jsTr (n ">" @lamNm) $ m $ [s " <- "] ++ intersperse (s ", ") (map p as)
                                                                                    , x
                                                                                    , Seq.singleton $ J.Stat_VarDecl v (Just @body.jsLamBody)
                                                                                    , jsTr (n "<" @lamNm) $ m [s " -> ", s v]
                                                                                    ]
                                                                    else x
                                                                  where m l = hlist $ intersperse (pp "+") l
                                                                        s :: Show a => a -> PP_Doc
                                                                        s x = pp (show x)
                                                                        s' :: Show a => a -> PP_Doc
                                                                        s' x = pp (show $ show x)
                                                                        p x = pp x
                                                                        n p x = p ++ show x
                                                             b = if ehcOptGenTrace @lhs.opts then jsVar v else @body.jsLamBody
                                                         in  jsFun @origLamNm as $ jsBody J.Stat_Ret @body.jbinds (t1 @body.jstats) (Just b)
                                                    else J.Expr_Str "*** ERR LAM ***"
%%]

%%[(8 javascript) hs
-- | construct the ffi call
ffiJavaScriptMkCall
  ::  Ty                          -- type of the imported function
  ->  ForeignExtraction
  ->  EHCOpts
  ->  Bool                        -- do eval of args
  ->  [Maybe HsName]              -- list of (possibly) type constructor names of arguments
  ->  Maybe HsName                -- and result
  ->  ( [J.Expr -> J.Expr]        -- additional unwrapping for each argument
      ,  J.Expr -> J.Expr         -- and result
      , [J.Expr] -> J.Expr        -- and primitive call itself
      )
ffiJavaScriptMkCall ty
     ent
  = javalikeMkFFICall
      ( const tyDefault
      , \_ _ -> bx
      , \_ -> bx
      , \_ _ impExtract
%%[[8
          -> jsVar $ mkHNm $ forextractEnt impExtract
%%][90
          -> case impExtract of
               ForeignExtraction_Plain {forextractEnt = impEntNm}
                 -> jsVar $ mkHNm impEntNm
               ForeignExtraction_Wrapper
                 -> panic "ffiJavaScriptMkCall.mkPrimFun: wrapper not implemented"
               ForeignExtraction_Dynamic
                 -> panic "ffiJavaScriptMkCall.mkPrimFun: dynamic not implemented"
%%]]
      , \_ _ -> mk
      , mkWrap
      , mkDyn
      , jsEvl, tyDefault
      )
      ent
  where bx = (id,tyDefault)
        mkfargs f as -- TODO: Is this redundant?
%%[[90
          | isJust mbArgThis = (J.Expr_Sel this f, as')
%%]]
          | otherwise        = (f,as)
%%[[90
          where mbArgThis@(~(Just nr)) = forextractMbThisArgNr ent
                this = as !! inx
                inx = nr-1
                as' = take inx as ++ drop nr as
%%]]
%%[[8
        mk = J.Expr_Call
        mkWrap _ _ = panic "ffiJavaScriptMkCall.mkWrap"
        mkDyn  _ _ = panic "ffiJavaScriptMkCall.mkDyn"
%%][90
        mkObj as = jsCall "primToPlainObj" as
        mk = foreignexprEval (J.Expr_Sel,J.Expr_ArrInx,J.Expr_Call,id,mkObj,J.Expr_New,jsVar,J.Expr_Str) (forextractForeignExpr ent)
        -- TODO: Reuse some of the foreign export code for this? It's more or less generating the same code...
        -- TODO: Document that we require callback functions to be in IO
        mkWrap n (e:_) = mkWrapFn as bdy
          where as   = map (mkHNm . ('v':) . show) [1..(tyNumArgs ty - 1)]
                rn   = mkHNm "res"
                -- evaluate the composite parts of "res" before returning to the regular js world
                bdy  = [ J.jsVarDecl rn $ jsEvl $ jsApp e $ (map jsVar as) ++ [J.Expr_Arr []]
                       , J.Stat_Expr $ jsEvl $ J.Expr_ArrInx (jsVar rn) (jsIntConst 0)
                       , J.Stat_Ret $ jsEvl $ J.Expr_ArrInx (jsVar rn) (jsIntConst 1) ]

        mkDyn _ (e:es) = J.Expr_Call e es
%%]]
        mkcall (f,as) -- TODO: Is this redundant?
%%[[90
          | forextractOptIsPtr ent = f
%%]]
          | otherwise              = J.Expr_Call f as
%%]

%%[(90 javascript) hs
tyNumArgs :: Ty -> Int
tyNumArgs (Ty_App t@(Ty_App {}) arg)             = 1 + tyNumArgs t + tyNumArgs arg
tyNumArgs (Ty_App _ (Ty_App t@(Ty_App {}) arg))  = 1 + tyNumArgs t + tyNumArgs arg
tyNumArgs _                                      = 0

mkWrapFn :: [HsName] -> [J.Stat] -> J.Expr
mkWrapFn as bdy = J.Expr_Fun Nothing as $ J.Stat_Block bdy
%%]


%%[(8 javascript)
SEM CBound
  | Bind        loc         .   js              =   let str  = if @lhs.evalCtx == EvalCtx_Eval then jsEvl else id
                                                        dflt = @expr.js
                                                        caf  = jsApp (jsFun @lhs.nm [] $ jsBody J.Stat_Ret @expr.jbinds @expr.jstats (Just dflt)) []
                                                    in  if @lhs.isGlobal
                                                        then if @isCAF
                                                             then caf
                                                             else dflt
                                                        else if Seq.null @expr.jstats -- not @isCAF
                                                             then str dflt
                                                             else str caf
%%[[90
  | FFE         loc         .   js              = mkWrapFn @jsArgL
                                                    $ jsBody J.Stat_Ret @expr.jbinds @expr.jstats (Just @expr.jsLamBody)
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation: toplevel
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 javascript)
ATTR CodeAGItf CModule [ | | js: {J.JavaScriptModule} ]
%%]

%%[(8 javascript)
SEM CModule
 | Mod          lhs         .   js              =   J.JavaScriptModule_Mod (@jsModTraceStats ++ @jsModInitStats ++ @jmodStats) (Set.toList @expr.dps) @jmodStatsMain
%%[[8
                loc         .   jsModInitStats  =   []
%%][50
                loc         .   jsModInitStats  =   let prefixes = nub . catMaybes . map hsnQualifier
                                                        mk  n = J.Expr_If (jsVar n) (jsVar n) (J.Expr_Obj [])
                                                        mkd n e | isJust q  = jsAssign n e
                                                                | otherwise = J.Stat_VarDecl n (Just e)
                                                          where q = hsnQualifier n
                                                    in  map (\n -> mkd n $ mk n) $ concat $ reverse $ takeWhile (not.null) $ iterate prefixes $ Set.toList @expr.usedModNmS
%%]]
%%[[8
                loc         .   jsModTraceStats =   if ehcOptGenTrace @lhs.opts then [jsAssign (mkHNm "traceOn") J.Expr_True] else []
%%][100
                loc         .   jsModTraceStats =   []
%%]]
%%]
